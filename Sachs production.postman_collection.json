{
	"info": {
		"_postman_id": "16017371-33fa-45ac-aa2f-f79e3ee6f607",
		"name": "Sachs production",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27119163",
		"_collection_link": "https://asd666-7028.postman.co/workspace/asd-Workspace~a1c007fa-6e59-49bb-8c75-889440b9943d/collection/27119163-16017371-33fa-45ac-aa2f-f79e3ee6f607?action=share&source=collection_link&creator=27119163"
	},
	"item": [
		{
			"name": "config tool",
			"item": [
				{
					"name": "Not Runable",
					"item": [
						{
							"name": "/unassignedbike/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const chai = require('chai');\r",
											"const expect = chai.expect;\r",
											"\r",
											"pm.test(\"Check if 'success' property exists\", function () {\r",
											"    expect(pm.response.json()).to.have.property(\"success\", true);\r",
											"});\r",
											"pm.test(\"Check if 'data' property exists\", function () {\r",
											"    expect(pm.response.json()).to.have.property(\"data\");\r",
											"});\r",
											"pm.test(\"Check if 'data' is an array\", function () {\r",
											"    expect(pm.response.json().data).to.be.an(\"array\");\r",
											"});\r",
											"pm.test(\"Check unassignedbike list structure of each item in 'data'\", function () {\r",
											"    const data = pm.response.json().data;\r",
											"\r",
											"    data.forEach((item) => {\r",
											"        expect(item).to.have.property(\"id\");\r",
											"        expect(item).to.have.property(\"unique_id\");\r",
											"        expect(item).to.have.property(\"serial\");\r",
											"        expect(item).to.have.property(\"eol_passed\");\r",
											"        expect(item).to.have.property(\"eol_date\");\r",
											"        expect(item).to.have.property(\"eol_worker\");\r",
											"        expect(item).to.have.property(\"connection_key\");\r",
											"        expect(item).to.have.property(\"connection_key_new\");\r",
											"        expect(item).to.have.property(\"validated\");\r",
											"        expect(item).to.have.property(\"sw_release_eol\");\r",
											"        expect(item).to.have.property(\"mac_address\");\r",
											"        expect(item).to.have.property(\"user_id\");\r",
											"        expect(item).to.have.property(\"frame_id\");\r",
											"        expect(item).to.have.property(\"type\");\r",
											"        expect(item).to.have.property(\"name\");\r",
											"        expect(item).to.have.property(\"weight\");\r",
											"        expect(item).to.have.property(\"protocol\");\r",
											"        expect(item).to.have.property(\"status\");\r",
											"        expect(item).to.have.property(\"vendor_id\");\r",
											"        expect(item).to.have.property(\"serial_id\");\r",
											"        expect(item).to.have.property(\"setting_changed_at\");\r",
											"        expect(item).to.have.property(\"unassigned\");\r",
											"        expect(item).to.have.property(\"config_request\");\r",
											"        expect(item).to.have.property(\"approval\");\r",
											"        expect(item).to.have.property(\"created_at\");\r",
											"        expect(item).to.have.property(\"updated_at\");\r",
											"        expect(item).to.have.property(\"deleted_at\");\r",
											"    });\r",
											"});\r",
											"pm.test(\"Only unassigned bikes are in the response\", function () {\r",
											"     var responseJSON = pm.response.json();\r",
											"     responseJSON.data.forEach((bike) => {\r",
											"            pm.expect(bike.unassigned).to.equal(1);\r",
											"     });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.environment.get(\"skipRequest\")) {\r",
											"    postman.setNextRequest(null);\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/unassignedbike/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"unassignedbike",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "/unassignedbike/list test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const chai = require('chai');\r",
											"const expect = chai.expect;\r",
											"\r",
											"pm.test(\"Check if 'success' property exists\", function () {\r",
											"    expect(pm.response.json()).to.have.property(\"success\", true);\r",
											"});\r",
											"pm.test(\"Check if 'data' property exists\", function () {\r",
											"    expect(pm.response.json()).to.have.property(\"data\");\r",
											"});\r",
											"pm.test(\"Check if 'data' is an array\", function () {\r",
											"    expect(pm.response.json().data).to.be.an(\"array\");\r",
											"});\r",
											"pm.test(\"Check unassignedbike list structure of each item in 'data'\", function () {\r",
											"    const data = pm.response.json().data;\r",
											"\r",
											"    data.forEach((item) => {\r",
											"        expect(item).to.have.property(\"id\");\r",
											"        expect(item).to.have.property(\"unique_id\");\r",
											"        expect(item).to.have.property(\"serial\");\r",
											"        expect(item).to.have.property(\"eol_passed\");\r",
											"        expect(item).to.have.property(\"eol_date\");\r",
											"        expect(item).to.have.property(\"eol_worker\");\r",
											"        expect(item).to.have.property(\"connection_key\");\r",
											"        expect(item).to.have.property(\"connection_key_new\");\r",
											"        expect(item).to.have.property(\"validated\");\r",
											"        expect(item).to.have.property(\"sw_release_eol\");\r",
											"        expect(item).to.have.property(\"mac_address\");\r",
											"        expect(item).to.have.property(\"user_id\");\r",
											"        expect(item).to.have.property(\"frame_id\");\r",
											"        expect(item).to.have.property(\"type\");\r",
											"        expect(item).to.have.property(\"name\");\r",
											"        expect(item).to.have.property(\"weight\");\r",
											"        expect(item).to.have.property(\"protocol\");\r",
											"        expect(item).to.have.property(\"status\");\r",
											"        expect(item).to.have.property(\"vendor_id\");\r",
											"        expect(item).to.have.property(\"serial_id\");\r",
											"        expect(item).to.have.property(\"setting_changed_at\");\r",
											"        expect(item).to.have.property(\"unassigned\");\r",
											"        expect(item).to.have.property(\"config_request\");\r",
											"        expect(item).to.have.property(\"approval\");\r",
											"        expect(item).to.have.property(\"created_at\");\r",
											"        expect(item).to.have.property(\"updated_at\");\r",
											"        expect(item).to.have.property(\"deleted_at\");\r",
											"    });\r",
											"});\r",
											"\r",
											"/*pm.test(\"Check whether config request was correct or not\", function () {\r",
											"    var dataArray = pm.response.json().data;\r",
											"    pm.environment.set(\"\")\r",
											"\r",
											"    var index = 0;\r",
											"    var bikeFound = false;\r",
											"\r",
											"    while(index < dataArray.length && !bikeFound){\r",
											"        if(dataArray[index].id === 8){\r",
											"            bikeFound = true;\r",
											"            pm.expect(dataArray[index].config_request).to.equal(3);\r",
											"        }\r",
											"        index++;\r",
											"    }\r",
											"    pm.expect(bikeFound).to.be.true;\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.variables.get(\"skipRequestFlag\") === \"true\") {\r",
											"    skipRequest();\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/unassignedbike/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"unassignedbike",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "component/recalled/add bike",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"pm.test(\"Succes field is boolean true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.a('boolean').to.equal(true);\r",
											"});\r",
											"pm.test(\"Data field is an object\", function (){\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test(\"Data elements have 'serial' and 'id' fields\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('success');\r",
											"    pm.expect(pm.response.json()).to.have.property('data');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bikes[0][recalled_bike_id]",
											"value": "GregsBiketest",
											"type": "text"
										},
										{
											"key": "bikes[0][recalled]",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/component/recalled/add",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"component",
										"recalled",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/unassignedbike/configrequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"pm.test(\"Value of 'success' property is true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('success').to.be.true;\r",
											"});\r",
											"pm.test(\"Response is an object\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test(\"Response object has a 'success' and a 'data' property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('success');\r",
											"    pm.expect(pm.response.json()).to.have.property('data');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bikes[0][bike_id]",
											"value": "8",
											"type": "text"
										},
										{
											"key": "bikes[0][config_request]",
											"value": "3",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/unassignedbike/configrequest",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"unassignedbike",
										"configrequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "/release/add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "release_version",
											"value": "1.0.3",
											"type": "text"
										},
										{
											"key": "release_notes",
											"value": "testgreg notes2",
											"type": "text"
										},
										{
											"key": "release_component",
											"value": "[{\"component_id\":6,\"version\":\"1.0.3\",\"file\":\"software-batterySI504-generic-v1.0.3.hex\"}]",
											"type": "text"
										},
										{
											"key": "file0",
											"type": "file",
											"src": "/I:/Gergely/Sachs/test .hex files/software-batterySI504-generic-v1.0.3.hex",
											"disabled": true
										},
										{
											"key": "file2",
											"type": "file",
											"src": [],
											"disabled": true
										},
										{
											"key": "approval_status",
											"value": "2",
											"type": "text"
										},
										{
											"key": "activation_status",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/release/add",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"release",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/release/locked",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "id",
											"value": "180",
											"type": "text"
										},
										{
											"key": "token",
											"value": "3",
											"type": "default",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/release/locked",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"release",
										"locked"
									]
								}
							},
							"response": []
						},
						{
							"name": "enduser/component/stolen/list",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api_server}}api/enduser/component/stolen/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"enduser",
										"component",
										"stolen",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "/configuration/delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (pm.variables.get(\"skipRequestFlag\") === \"true\") {\r",
											"    skipRequest();\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response has 'success' set to true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"strictSSL": false
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "id",
											"value": "{{lastId}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/configuration/delete",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"configuration",
										"delete"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fuzzing",
					"item": [
						{
							"name": "/overview/bike fuzzing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200 or 429\", function(){",
											"  pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "order",
											"value": "serial",
											"type": "text"
										},
										{
											"key": "search[stolen]",
											"value": "0",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[bike_id]",
											"value": "{{testStrings}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/overview/bike",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"overview",
										"bike"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Scenario-Contract",
					"item": [
						{
							"name": "api/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const chai = require('chai');\r",
											"const expect = chai.expect;\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check if 'access_token' property exists\", function () {\r",
											"    expect(pm.response.json()).to.have.property(\"access_token\");\r",
											"});\r",
											"pm.test(\"Check if 'token_type' property exists\", function () {\r",
											"    expect(pm.response.json()).to.have.property(\"token_type\", \"Bearer\");\r",
											"});\r",
											"pm.test(\"Check if 'expires_in' property exists\", function () {\r",
											"    expect(pm.response.json()).to.have.property(\"expires_in\");\r",
											"});\r",
											"pm.test(\"Check if 'expires_in' is a number\", function () {\r",
											"    expect(pm.response.json().expires_in).to.be.a(\"number\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_server}}api/login?client_id=bC8NrdMkwfCj7eiinYaB7qIxWTCERcTRfzQwwBJH&client_secret=izBjX6QEJvSi4hh2zctJ7R5CgLKBdYMl88eusoMY",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"login"
									],
									"query": [
										{
											"key": "client_id",
											"value": "bC8NrdMkwfCj7eiinYaB7qIxWTCERcTRfzQwwBJH"
										},
										{
											"key": "client_secret",
											"value": "izBjX6QEJvSi4hh2zctJ7R5CgLKBdYMl88eusoMY"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "options/brands",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response should have a success property\", function () {\r",
											"    pm.response.to.have.jsonBody('success', true);\r",
											"});\r",
											"pm.test(\"Brands data array should have the correct structure and values\", function () {\r",
											"    const expectedData = [\r",
											"        { \"id\": 1, \"name\": \"Atala\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 2, \"name\": \"BABBOE\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 3, \"name\": \"Batavus\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 4, \"name\": \"Carqon\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 5, \"name\": \"Carraro Cicli\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 6, \"name\": \"Ghost\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 7, \"name\": \"Haibike\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 8, \"name\": \"Juncker\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 9, \"name\": \"Koga\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 10, \"name\": \"Lapierre\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 11, \"name\": \"Nishiki\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 12, \"name\": \"Raleigh UK\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 13, \"name\": \"Sparta\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 14, \"name\": \"Tunturi-Hellberg\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 15, \"name\": \"Van Nicholas\", \"OEM_ID\": 2 },\r",
											"        { \"id\": 16, \"name\": \"Winora\", \"OEM_ID\": 2 }\r",
											"    ];\r",
											"\r",
											"    pm.response.to.have.jsonBody('data', expectedData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiIzNDg0MDM2OTBlNGYzZDEzZDIzNGU2ODlkNDIzYTBjYzhiODk4MjFhY2ZhYzg0NjVjNGYzMmExOGQzZmNmY2I3ZjNhMTE0NjMyNjkwMGZiYiIsImlhdCI6MTY0NjkwNDk4Ny40NjQxMjcsIm5iZiI6MTY0NjkwNDk4Ny40NjQxMzQsImV4cCI6MTY3ODQ0MDk4Ny40NTE0MjQsInN1YiI6IjEiLCJzY29wZXMiOltdfQ.fVx7eTAtEibMfkfzTONBTgVOCqVADlmuZNhsQu-youiFwRCkAMdJFCn-LpuJAIsd2iisvZH6K93RI20ja5_XHCqBNVTVR7ycnJ7ZSMYRQLKApeUSVQqwglempRud8L1w8eEHpqgoPMm8wgDk6OKs0D_UZmYK9iEZFZEyzMdfYg5Lloww-nbI2dEBvo1jN1aSDzGtXSHmd8FNNXsAIKSLUUNievN5R_PhRH10k_Z_K-kHv-cfunW6Ax7wNiTMkVgtv9nCIGiO5BdS-RyroE2fi9agPxcJCcb2uwJV-8d6aVPKb_lOxeZsbR3w63xU8SwSOYVbHHhKkHic6tJFV9WIPFjvqYbL4X8j4L-_i41YiUNNTIhcSkA7Gvrm32qIU8nT-cmBDvUm-TCRb03ebOHrFvJkCY71eNl26XG6L-U_yVn_T9LAc8KKeOk1sMR6w_GW7TXrwm4GhjLk1Y8jOK1pvWLM_ptWMZNlTmxGPwfuRwe49rTxML0T0YnyyDDmhMFhtFwnU0qpOqwz3pe7vq3pZEPCGs2wTWWFB8BtciYE16IFHqKQEN8ST6Wg9GnmjbIMmbM5l8vgFpNKVDaH9rQBSC_XvKFKTcJKExX4_8-eBZtpqx7cpVJf9SdQz8h4EkfUt6DrL1PpF-Rt_1559iRA3yy3U2UdyDzjzO6udRCXXGI",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/options/brands",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"options",
										"brands"
									]
								}
							},
							"response": []
						},
						{
							"name": "options/device",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response should have a success property\", function () {\r",
											"    pm.response.to.have.jsonBody('success', true);\r",
											"});\r",
											"pm.test(\"Device type data array should have the correct structure and values\", function () {\r",
											"    const expectedData = [\r",
											"        { \"id\": 1, \"name\": \"Core HMI\" },\r",
											"        { \"id\": 2, \"name\": \"Electric Drive Unit\" },\r",
											"        { \"id\": 3, \"name\": \"Battery\" },\r",
											"        { \"id\": 4, \"name\": \"Display\" },\r",
											"        { \"id\": 5, \"name\": \"Remote\" }\r",
											"    ];\r",
											"\r",
											"    pm.response.to.have.jsonBody('data', expectedData);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/options/componentclass",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"options",
										"componentclass"
									]
								}
							},
							"response": []
						},
						{
							"name": "options/language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response should have a success property\", function () {\r",
											"    pm.response.to.have.jsonBody('success', true);\r",
											"});\r",
											"pm.test(\"Language data array should have the correct structure and values\", function () {\r",
											"    const expectedData = [\r",
											"        { \"id\": 1, \"name\": \"English\" },\r",
											"        { \"id\": 2, \"name\": \"German\" },\r",
											"        { \"id\": 3, \"name\": \"French\" },\r",
											"        { \"id\": 4, \"name\": \"Italian\" },\r",
											"        { \"id\": 5, \"name\": \"Spanish\" },\r",
											"        { \"id\": 6, \"name\": \"Danish\" },\r",
											"        { \"id\": 7, \"name\": \"Dutch\" }\r",
											"    ];\r",
											"\r",
											"    pm.response.to.have.jsonBody('data', expectedData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/options/language",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"options",
										"language"
									]
								}
							},
							"response": []
						},
						{
							"name": "options/motor_configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response should have a success property\", function () {\r",
											"    pm.response.to.have.jsonBody('success', true);\r",
											"});\r",
											"pm.test(\"Bike type/ Motor Configuration Data array should have the correct structure and values\", function () {\r",
											"    const expectedData = [\r",
											"        { \"id\": 1, \"name\": \"MTB\" },\r",
											"        { \"id\": 2, \"name\": \"City\" },\r",
											"        { \"id\": 3, \"name\": \"Road\" },\r",
											"        { \"id\": 4, \"name\": \"Cargo\" },\r",
											"        { \"id\": 5, \"name\": \"Gravel\" }\r",
											"    ];\r",
											"\r",
											"    pm.response.to.have.jsonBody('data', expectedData);\r",
											"});\r",
											"pm.test(\"Each type entry should have id and name properties\", function () {\r",
											"    const responseData = pm.response.json().data;\r",
											"\r",
											"    responseData.forEach(function (type) {\r",
											"        pm.expect(type).to.have.property('id');\r",
											"        pm.expect(type).to.have.property('name');\r",
											"        pm.expect(type.id).to.be.a('number');\r",
											"        pm.expect(type.name).to.be.a('string');\r",
											"    });\r",
											"});\r",
											"pm.test(\"IDs should be unique\", function () {\r",
											"    const responseData = pm.response.json().data;\r",
											"    const uniqueIds = new Set(responseData.map(type => type.id));\r",
											"\r",
											"    pm.expect(uniqueIds.size).to.equal(responseData.length);\r",
											"});\r",
											"pm.test(\"Response should contain specific types\", function () {\r",
											"    const responseData = pm.response.json().data;\r",
											"\r",
											"    pm.expect(responseData.some(type => type.name === \"MTB\")).to.be.true;\r",
											"    pm.expect(responseData.some(type => type.name === \"City\")).to.be.true;\r",
											"    pm.expect(responseData.some(type => type.name === \"Road\")).to.be.true;\r",
											"    pm.expect(responseData.some(type => type.name === \"Cargo\")).to.be.true;\r",
											"    pm.expect(responseData.some(type => type.name === \"Gravel\")).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/options/motor_configuration",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"options",
										"motor_configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "options/componentclass",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response should have a success property\", function () {\r",
											"     var responseData = pm.response.json();\r",
											"     pm.expect(responseData).to.have.property('success');\r",
											"});\r",
											"pm.test(\"Component Class data array should have the correct structure and values\", function () {\r",
											"    const expectedData = [\r",
											"        { \"id\": 1, \"name\": \"Core HMI\" },\r",
											"        { \"id\": 2, \"name\": \"Electric Drive Unit\" },\r",
											"        { \"id\": 3, \"name\": \"Battery\" },\r",
											"        { \"id\": 4, \"name\": \"Display\" },\r",
											"        { \"id\": 5, \"name\": \"Remote\" }\r",
											"    ];\r",
											"\r",
											"    pm.response.to.have.jsonBody('data', expectedData);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/options/componentclass",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"options",
										"componentclass"
									]
								}
							},
							"response": []
						},
						{
							"name": "options/oe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response should have a sucess property\", function(){\r",
											"    pm.response.to.have.jsonBody('success', true);\r",
											"});\r",
											"pm.test(\"OEMs data array should have the correct structure and values\", function () {\r",
											"    const expectedData = [\r",
											"        { \"id\": 2, \"name\": \"ZF\", \"status\": 1},\r",
											"        { \"id\": 3, \"name\": \"Test\", \"status\": 1 }\r",
											"    ];\r",
											"\r",
											"    pm.response.to.have.jsonBody('data', expectedData);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/options/oe",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"options",
										"oe"
									]
								}
							},
							"response": []
						},
						{
							"name": "options/unit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response should have a success property\", function(){\r",
											"    pm.response.to.have.jsonBody('success', true);\r",
											"});\r",
											"pm.test(\"Unit data array should have the correct structure and values\", function () {\r",
											"    const expectedData = [\r",
											"        { \"id\": 1, \"name\": \"Metric\" },\r",
											"        { \"id\": 2, \"name\": \"Imperial\" }\r",
											"    ];\r",
											"\r",
											"    pm.response.to.have.jsonBody('data', expectedData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/options/unit",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"options",
										"unit"
									]
								}
							},
							"response": []
						},
						{
							"name": "options/support_mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response should have a success property\", function(){\r",
											"    pm.response.to.have.jsonBody('success', true);\r",
											"});\r",
											"pm.test(\"Support mode data array should have the correct structure and values\", function () {\r",
											"    const expectedData = [\r",
											"        { \"id\": 1, \"name\": \"most used\" },\r",
											"        { \"id\": 2, \"name\": \"last used\" }\r",
											"    ];\r",
											"\r",
											"    pm.response.to.have.jsonBody('data', expectedData);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/options/support_mode",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"options",
										"support_mode"
									]
								}
							},
							"response": []
						},
						{
							"name": "/configuration/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is successful\", function () {\r",
											"    pm.response.to.have.jsonBody(\"success\", true);\r",
											"});\r",
											"pm.test(\"User Groups property exists\", function () {\r",
											"    pm.response.to.have.jsonBody(\"user_groups\");\r",
											"});\r",
											"pm.test(\"Configuration list response has expected structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"success\", true);\r",
											"    pm.expect(jsonData).to.have.property(\"user_groups\").and.to.be.an(\"array\");\r",
											"\r",
											"    jsonData.data.forEach((configuration) => {\r",
											"        pm.expect(configuration).to.have.property(\"id\");\r",
											"        pm.expect(configuration).to.have.property(\"config_id\");\r",
											"        pm.expect(configuration).to.have.property(\"config_name\");\r",
											"        pm.expect(configuration).to.have.property(\"created_by\");\r",
											"        pm.expect(configuration).to.have.property(\"oe\");\r",
											"        pm.expect(configuration).to.have.property(\"brand\");\r",
											"        pm.expect(configuration).to.have.property(\"approval\");\r",
											"        pm.expect(configuration).to.have.property(\"unassigned\");\r",
											"        pm.expect(configuration).to.have.property(\"config_request\");\r",
											"        pm.expect(configuration).to.have.property(\"comment\");\r",
											"        pm.expect(configuration).to.have.property(\"bike_model_name\");\r",
											"        pm.expect(configuration).to.have.property(\"date_of_next_service\");\r",
											"        pm.expect(configuration).to.have.property(\"odo_of_next_service\");\r",
											"        pm.expect(configuration).to.have.property(\"light_reserved_area\");\r",
											"        pm.expect(configuration).to.have.property(\"lower_battery_discharge_limit\");\r",
											"        pm.expect(configuration).to.have.property(\"max_walk_speed\");\r",
											"        pm.expect(configuration).to.have.property(\"max_supported_speed\");\r",
											"        pm.expect(configuration).to.have.property(\"motor_configuration\");\r",
											"        pm.expect(configuration).to.have.property(\"upper_battery_charge_limit\");\r",
											"        pm.expect(configuration).to.have.property(\"gear_sensor\");\r",
											"        pm.expect(configuration).to.have.property(\"left_remote_available\");\r",
											"        pm.expect(configuration).to.have.property(\"center_display_available\");\r",
											"        pm.expect(configuration).to.have.property(\"auto_light\");\r",
											"        pm.expect(configuration).to.have.property(\"flex_battery\");\r",
											"        pm.expect(configuration).to.have.property(\"tonewheel\");\r",
											"        pm.expect(configuration).to.have.property(\"manual_checks_for_eol\");\r",
											"        pm.expect(configuration).to.have.property(\"starting_date_eol\");\r",
											"        pm.expect(configuration).to.have.property(\"bike_count\");\r",
											"        pm.expect(configuration).to.have.property(\"created_at\");\r",
											"        pm.expect(configuration).to.have.property(\"updated_at\");\r",
											"        pm.expect(configuration).to.have.property(\"user\").and.to.be.an(\"array\");\r",
											"     \r",
											"\r",
											"        configuration.components.forEach((component) => {\r",
											"            pm.expect(component).to.have.property(\"id\");\r",
											"            pm.expect(component).to.have.property(\"configuration_id\");\r",
											"            pm.expect(component).to.have.property(\"component_id\");\r",
											"            pm.expect(component).to.have.property(\"created_at\");\r",
											"            pm.expect(component).to.have.property(\"updated_at\");\r",
											"            pm.expect(component).to.have.property(\"deleted_at\");\r",
											"          \r",
											"\r",
											"            component.component_data.forEach((componentData) => {\r",
											"                pm.expect(componentData).to.have.property(\"id\");\r",
											"                pm.expect(componentData).to.have.property(\"component\");\r",
											"                pm.expect(componentData).to.have.property(\"component_name\");\r",
											"                pm.expect(componentData).to.have.property(\"component_class\");\r",
											"                pm.expect(componentData).to.have.property(\"component_identifier\");\r",
											"                pm.expect(componentData).to.have.property(\"OEM_ID\");\r",
											"                pm.expect(componentData).to.have.property(\"bike_type\");\r",
											"                pm.expect(componentData).to.have.property(\"created_at\");\r",
											"                pm.expect(componentData).to.have.property(\"updated_at\");\r",
											"                pm.expect(componentData).to.have.property(\"deleted_at\");\r",
											"                pm.expect(componentData).to.have.property(\"editable\");\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"// Checks wether all configuration is unique (by id) \r",
											"var jsonData = pm.response.json();\r",
											"var seenIds = new Set();\r",
											"\r",
											"jsonData.data.forEach(function(config) {\r",
											"    \r",
											"    var configId = config.id;\r",
											"\r",
											"    pm.test('Unique \"id\" for configuration ' + configId, function() {\r",
											"        pm.expect(seenIds.has(configId)).to.be.false;\r",
											"        seenIds.add(configId);\r",
											"    });\r",
											"});\r",
											"\r",
											"// Check wether these 'id', 'config_id', 'OEM_ID', 'brand', 'bike_model_name', 'motor_configuration' properties are not null\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"var propertiesToCheck = ['id', 'config_id', 'OEM_ID', 'brand', 'bike_model_name', 'motor_configuration'];\r",
											"\r",
											"\r",
											"jsonData.data.forEach(function(config) {\r",
											"    \r",
											"    if (config.id && config.config_id && config.config_name) {\r",
											"        \r",
											"        propertiesToCheck.forEach(function(property) {\r",
											"            pm.test(property + ' is not null for configuration ' + config.id, function() {\r",
											"                pm.expect(config[property]).to.not.be.null;\r",
											"            });\r",
											"        });\r",
											"\r",
											"        config.components.forEach(function(component) {\r",
											"            pm.test('Component properties are not null for configuration ' + config.id, function() {\r",
											"                pm.expect(component.component_data[0].id).to.not.be.null;\r",
											"                pm.expect(component.component_data[0].component).to.not.be.null;\r",
											"                pm.expect(component.component_data[0].component_name).to.not.be.null;\r",
											"                pm.expect(component.component_data[0].component_class).to.not.be.null;\r",
											"                pm.expect(component.component_data[0].component_identifier).to.not.be.null;\r",
											"                pm.expect(component.component_data[0].OEM_ID).to.not.be.null;\r",
											"                pm.expect(component.component_data[0].bike_type).to.not.be.null;\r",
											"            });\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"var processedConfigurations = new Set();\r",
											"\r",
											"var componentsToCheck = ['Core HMI', 'Battery', 'Electric Drive Unit'];\r",
											"\r",
											"var uniqueConfigNames = new Set();\r",
											"\r",
											"jsonData.data.forEach(function(config) {\r",
											"    \r",
											"    if (config.id && config.config_id && config.config_name && !processedConfigurations.has(config.id)) {\r",
											"     \r",
											"        processedConfigurations.add(config.id);\r",
											"\r",
											"        pm.test('Unique \"config_name\" for configuration ' + config.id, function() {\r",
											"            pm.expect(uniqueConfigNames.has(config.config_name)).to.be.false;\r",
											"            uniqueConfigNames.add(config.config_name);\r",
											"        });\r",
											"\r",
											"        if (config.components) {\r",
											"            \r",
											"            pm.test('\"components\" array is not empty for configuration ' + config.id, function() {\r",
											"                pm.expect(config.components.length).to.be.above(0);\r",
											"            });\r",
											"\r",
											"            componentsToCheck.forEach(function(componentToCheck) {\r",
											"                pm.test('\"' + componentToCheck + '\" component exists for configuration ' + config.id, function() {\r",
											"                    var componentExists = config.components.some(function(component) {\r",
											"                        return component.component_data && component.component_data.length > 0 &&\r",
											"                            component.component_data[0].component === componentToCheck;\r",
											"                    });\r",
											"                    pm.expect(componentExists).to.be.true;\r",
											"                });\r",
											"            });\r",
											"        } else {\r",
											"            \r",
											"            pm.test('\"components\" array is not empty for configuration ' + config.id, function() {\r",
											"                pm.expect(config.components).to.not.be.empty;\r",
											"            });\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"// Testing business logic: Is must not be possible to save a Configuration with the exact same Configuration Name and Bike Model Name which already exist in the database\r",
											"const configurations = pm.response.json().data;\r",
											"\r",
											"function checkUniqueNames(configurations) {\r",
											"    const seenNames = new Set();\r",
											"\r",
											"    configurations.forEach(config => {\r",
											"        pm.test(`Configurations \"${config.config_id}\" should have unique \"config_name\"`, function () {\r",
											"            pm.expect(config.config_name).not.to.be.oneOf(Array.from(seenNames));\r",
											"            seenNames.add(config.config_name);\r",
											"            //console.log(config.config_name);\r",
											"        });\r",
											"\r",
											"        pm.test(`Configurations \"${config.config_id}\" should have unique \"bike_model_name\"`, function () {\r",
											"            pm.expect(config.bike_model_name).not.to.be.oneOf(Array.from(seenNames));\r",
											"            seenNames.add(config.bike_model_name);\r",
											"            console.log(config.bike_model_name);\r",
											"        });\r",
											"    });\r",
											"}\r",
											"checkUniqueNames(configurations);\r",
											"\r",
											"\r",
											"pm.test(\"Created_by is not an empty string for each configuration\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.data).to.be.an('array');\r",
											"    \r",
											"    responseData.data.forEach(function(configuration) {\r",
											"        pm.expect(configuration.created_by).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IjJCSE90TTB2R0h0NjR0enB6cGpNVDVXNkVwYS1ULXY4QXZGQU1UeS1pZjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ5MTQ0Njk5LCJuYmYiOjE2NDkxNDQ2OTksImV4cCI6MTY0OTE1MDAwMywiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQUIxNG5SUkF0WnFQSGhqaHZqYVZHOEU5MWpPVGdVM3hSS3pqUW5QcEpDT2VpMXdIamVDUEk0cXdtQTZoQkJicTBWazdQV0tYVFZEa3lNVFJCZnN5ajdRPT0iLCJhbHRzZWNpZCI6IjE6bGl2ZS5jb206MDAwMzQwMDEyRDQ3NTdEQSIsImFtciI6WyJwd2QiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImVtYWlsIjoibWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwiZmFtaWx5X25hbWUiOiJNw6F0w6kiLCJnaXZlbl9uYW1lIjoiVGFrw6FjcyIsImlkcCI6ImxpdmUuY29tIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMjEzLjIyMi4xOTEuMjMzIiwibmFtZSI6IlRha8OhY3MgTcOhdMOpIiwib2lkIjoiMDdkNWVmODktODY2MS00NWM5LWE5M2UtZjdkN2I0ZTc4YTE1IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxRTUxQTM3MTgiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUdrLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic3ViIjoiRXdTUEdxbHR3VGUtc1hsMERzeU5NM0hWQ1ktSVFnMEpqYU1BVnA3Z2NRQSIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJFVSIsInRpZCI6ImQ1MTk5OTA3LTY1ODAtNDY0OC1iYjMxLWRiYTE5YTI3OTU4MyIsInVuaXF1ZV9uYW1lIjoibGl2ZS5jb20jbWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwidXRpIjoiaEk0R29qWDJQa0dIOV9iSUYySTlBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiMTNiZDFjNzItNmY0YS00ZGNmLTk4NWYtMThkM2I4MGYyMDhhIl0sInhtc19zdCI6eyJzdWIiOiJiWGFJSG5BX2pnWG5nVTlwRkpDZTJ2WlB1bW5TcHktWTZoaUhkajZXSGNVIn0sInhtc190Y2R0IjoxNTI4NzI5NzQzfQ.M1hAhr4c6-Ml7yazLd0wGXvKtPXhKnHGpbI6HNRzHexyrasMepz2utT-uZb5vJwcCr0mNMgAUJsAbm8kgRDWQF4RSIKTIEGNRruQYLh-SjDKbNt6MQ0k7ZCl63Y5hKkGyMZpuGoj3Nvg4e_28XbzP4g4hpycos1aqhptEAslLZvAcY3ARIlr_WtqbEidhTkuBvzYlnOoVzao-BOe8L3RDCttHAESoxhFv_AQfI_NV4PtutCSyuIp1ywtEPpLnjsXwR2O6zDEAPOv2JDUaUICmtQldVkWn6syp4PAUgS1ENbltTMo9VzEPpx2xrXc3PwFi8CaalruxSINrW_8Rr9_rg",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IlctZ2xBYWFSQTlDMW5PLThkWnpzR1dyeXpXVXFqcUlkeVd2Mjh1d1ZpTjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjUwNDU3NDI5LCJuYmYiOjE2NTA0NTc0MjksImV4cCI6MTY1MDQ2MzA4NiwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFaUUFhLzhUQUFBQWlVVmgvRlE4WjA3SGFsaFA3Y1VnMUdpZUpwVitZTGRhcmY2OS84bWFKd0dYQXpGblhaQ1B2eTVmUWdjMWpvU0E0SkdLN1FoRkNORTdoemNWWFUwdTE0OUpjNFp2N1NXbkNrTDZRaXRnanE4YlFPeXJpcDc1NE1rbGdKb011Q1FDaGh3NmpIWlBtaElueFNyMmpaV1ZTKzN0L2lRREpkM0JCMVk0dE5NUTJFRkUzeDMwMHBQMDhweThQNm56MmY0cyIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImZhbWlseV9uYW1lIjoiS2ltcGZsZXIiLCJnaXZlbl9uYW1lIjoiTWFyY28iLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIyMTcuMjQ4LjM3Ljg5IiwibmFtZSI6Ik1hcmNvIEtpbXBmbGVyIiwib2lkIjoiMjUxZTI0ZTItMWE2Yi00NDJjLWIzY2UtZDM2YWU5N2U0OWY2IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDM3RkZFQUVGNUYyOEYiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUVFLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIFVzZXIuUmVhZCBlbWFpbCIsInNpZ25pbl9zdGF0ZSI6WyJrbXNpIl0sInN1YiI6IjlIOWx0TXQxN1RTc241LUJWdHB0LW9VbmtKeHhuYTNSYUE0UzFrQ1ptQjQiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiRVUiLCJ0aWQiOiJkNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMiLCJ1bmlxdWVfbmFtZSI6Im0ua2ltcGZsZXJAemZtaWNyb21vYmlsaXR5LmNvbSIsInVwbiI6Im0ua2ltcGZsZXJAemZtaWNyb21vYmlsaXR5LmNvbSIsInV0aSI6InNGRUVYR1ZNU1VHWGpQMzYxVFFOQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbIjYyZTkwMzk0LTY5ZjUtNDIzNy05MTkwLTAxMjE3NzE0NWUxMCIsImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiMjR3ZGhMUHhmcEZjMklFcklNZURDUEFiUm84TWQ2RjAwdGpMNWlnTjdORSJ9LCJ4bXNfdGNkdCI6MTUyODcyOTc0M30.f68kmbMrLIalrih2bTSqolpp7YLNJ7Oe2anfmHkjQdZrKMBRNe2yAbvKhqS_3BI3l3FZMXSxUN5Q3BAqxyoCZX4MVeqziAG-IXtG76Akq1svBVegocJZvQgkGFr6hAJ3avmzWma3gjFkbCk7OX2S8K9P31TcN92UyuViYdYLU2Gmwnxmy6zfHT_-5JiUz-Kcoqse8yqqvuyhVu7lqzBjTl45QpVIGU2FUCYH3NisU-JBB6pb-KSLcGHh39OazcV6zILYjZxtamcgxj6dvA3PnxSbMYI_aeQJzkCOzI57uns-otgjjZHrSXkZ9fXLWpGhfmwXdNSNX4OKEtY7KjmX_g",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiI3NGNjZjlmYWI0MTliNjdiYmEwNmFjZTZmMzU2Nzk0ZTM2ZTJkNDNlNjA2YjBhNzdhYjcyMDE0MTE4NWYxYWM3Yzc0MTJlOTRlMWNlZWQ1MCIsImlhdCI6MTYzOTQxMDU1MywibmJmIjoxNjM5NDEwNTUzLCJleHAiOjE2NzA5NDY1NTMsInN1YiI6IjMiLCJzY29wZXMiOltdfQ.PAfznb5g28KaQw5bycwIoREC7zSnGI5QehcxKIYRKHq20awEOopprOZQwWc_n6qBoGFElBnYo0HQ6bRrxwdVcIeP4-FyAqBT5XaGiAM7Qf7mChDD-t8yXLmPCvFzgNrV1_G90pFyb_Wep-5aS-X94vm5FBcS4rvUxYs-F0OYNiXbdi18JLvolYApfnQX5YCgme_eD13jqupofN3EVvFMulJ34ouKCAmPfcUP8bdZdjmPJe77EYUJYOnhq1adx2K3VPSY7JBzKxMw-Q2feSVuF5kjitSZWXkxZX5Gx8U2Q5H95RG-S8e7sTThUE5DdQLaWNqyR2kBWTo5EeEV-v-YlKHdYKfz3zk5A71bzaVa5yZW2gpaHg0bdHeKTDRPjxMy0Uihs5tG8AUD9XOmxRorteE510SbiYL4cZ6orWsCV7vyUluYbk27TbKwsXGoOrEEDoF4bXAefHGAZJb_2_zeAVsTaOvyfcSo_AvIkgB4PtI8wgdrrVUT2G_h5Zj1X7hhILwTrXYKoMTOGka1Gyv5ZVXifXrMSAQDeQ2TJBktvSP3YwrvXI9nte2gjSSiSMdbS7GTXrvJwwrbKxaU91DqrTxoN7Hsz-2czxgUXY1OSDic1hbz6A6gF1S824_-Fvw9Yr1_uQOJUeWbN_l-FCERImM8irN5g82VOyi3-tNjcW0",
										"description": "dealer token",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IjJCSE90TTB2R0h0NjR0enB6cGpNVDVXNkVwYS1ULXY4QXZGQU1UeS1pZjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ5MTQ0Njk5LCJuYmYiOjE2NDkxNDQ2OTksImV4cCI6MTY0OTE1MDAwMywiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQUIxNG5SUkF0WnFQSGhqaHZqYVZHOEU5MWpPVGdVM3hSS3pqUW5QcEpDT2VpMXdIamVDUEk0cXdtQTZoQkJicTBWazdQV0tYVFZEa3lNVFJCZnN5ajdRPT0iLCJhbHRzZWNpZCI6IjE6bGl2ZS5jb206MDAwMzQwMDEyRDQ3NTdEQSIsImFtciI6WyJwd2QiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImVtYWlsIjoibWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwiZmFtaWx5X25hbWUiOiJNw6F0w6kiLCJnaXZlbl9uYW1lIjoiVGFrw6FjcyIsImlkcCI6ImxpdmUuY29tIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMjEzLjIyMi4xOTEuMjMzIiwibmFtZSI6IlRha8OhY3MgTcOhdMOpIiwib2lkIjoiMDdkNWVmODktODY2MS00NWM5LWE5M2UtZjdkN2I0ZTc4YTE1IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxRTUxQTM3MTgiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUdrLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic3ViIjoiRXdTUEdxbHR3VGUtc1hsMERzeU5NM0hWQ1ktSVFnMEpqYU1BVnA3Z2NRQSIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJFVSIsInRpZCI6ImQ1MTk5OTA3LTY1ODAtNDY0OC1iYjMxLWRiYTE5YTI3OTU4MyIsInVuaXF1ZV9uYW1lIjoibGl2ZS5jb20jbWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwidXRpIjoiaEk0R29qWDJQa0dIOV9iSUYySTlBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiMTNiZDFjNzItNmY0YS00ZGNmLTk4NWYtMThkM2I4MGYyMDhhIl0sInhtc19zdCI6eyJzdWIiOiJiWGFJSG5BX2pnWG5nVTlwRkpDZTJ2WlB1bW5TcHktWTZoaUhkajZXSGNVIn0sInhtc190Y2R0IjoxNTI4NzI5NzQzfQ.M1hAhr4c6-Ml7yazLd0wGXvKtPXhKnHGpbI6HNRzHexyrasMepz2utT-uZb5vJwcCr0mNMgAUJsAbm8kgRDWQF4RSIKTIEGNRruQYLh-SjDKbNt6MQ0k7ZCl63Y5hKkGyMZpuGoj3Nvg4e_28XbzP4g4hpycos1aqhptEAslLZvAcY3ARIlr_WtqbEidhTkuBvzYlnOoVzao-BOe8L3RDCttHAESoxhFv_AQfI_NV4PtutCSyuIp1ywtEPpLnjsXwR2O6zDEAPOv2JDUaUICmtQldVkWn6syp4PAUgS1ENbltTMo9VzEPpx2xrXc3PwFi8CaalruxSINrW_8Rr9_rg",
										"description": "Taki",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IlctZ2xBYWFSQTlDMW5PLThkWnpzR1dyeXpXVXFqcUlkeVd2Mjh1d1ZpTjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjUwNDU3NDI5LCJuYmYiOjE2NTA0NTc0MjksImV4cCI6MTY1MDQ2MzA4NiwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFaUUFhLzhUQUFBQWlVVmgvRlE4WjA3SGFsaFA3Y1VnMUdpZUpwVitZTGRhcmY2OS84bWFKd0dYQXpGblhaQ1B2eTVmUWdjMWpvU0E0SkdLN1FoRkNORTdoemNWWFUwdTE0OUpjNFp2N1NXbkNrTDZRaXRnanE4YlFPeXJpcDc1NE1rbGdKb011Q1FDaGh3NmpIWlBtaElueFNyMmpaV1ZTKzN0L2lRREpkM0JCMVk0dE5NUTJFRkUzeDMwMHBQMDhweThQNm56MmY0cyIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImZhbWlseV9uYW1lIjoiS2ltcGZsZXIiLCJnaXZlbl9uYW1lIjoiTWFyY28iLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIyMTcuMjQ4LjM3Ljg5IiwibmFtZSI6Ik1hcmNvIEtpbXBmbGVyIiwib2lkIjoiMjUxZTI0ZTItMWE2Yi00NDJjLWIzY2UtZDM2YWU5N2U0OWY2IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDM3RkZFQUVGNUYyOEYiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUVFLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIFVzZXIuUmVhZCBlbWFpbCIsInNpZ25pbl9zdGF0ZSI6WyJrbXNpIl0sInN1YiI6IjlIOWx0TXQxN1RTc241LUJWdHB0LW9VbmtKeHhuYTNSYUE0UzFrQ1ptQjQiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiRVUiLCJ0aWQiOiJkNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMiLCJ1bmlxdWVfbmFtZSI6Im0ua2ltcGZsZXJAemZtaWNyb21vYmlsaXR5LmNvbSIsInVwbiI6Im0ua2ltcGZsZXJAemZtaWNyb21vYmlsaXR5LmNvbSIsInV0aSI6InNGRUVYR1ZNU1VHWGpQMzYxVFFOQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbIjYyZTkwMzk0LTY5ZjUtNDIzNy05MTkwLTAxMjE3NzE0NWUxMCIsImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiMjR3ZGhMUHhmcEZjMklFcklNZURDUEFiUm84TWQ2RjAwdGpMNWlnTjdORSJ9LCJ4bXNfdGNkdCI6MTUyODcyOTc0M30.f68kmbMrLIalrih2bTSqolpp7YLNJ7Oe2anfmHkjQdZrKMBRNe2yAbvKhqS_3BI3l3FZMXSxUN5Q3BAqxyoCZX4MVeqziAG-IXtG76Akq1svBVegocJZvQgkGFr6hAJ3avmzWma3gjFkbCk7OX2S8K9P31TcN92UyuViYdYLU2Gmwnxmy6zfHT_-5JiUz-Kcoqse8yqqvuyhVu7lqzBjTl45QpVIGU2FUCYH3NisU-JBB6pb-KSLcGHh39OazcV6zILYjZxtamcgxj6dvA3PnxSbMYI_aeQJzkCOzI57uns-otgjjZHrSXkZ9fXLWpGhfmwXdNSNX4OKEtY7KjmX_g",
										"description": "Marco",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6ImhXZ2tBU3pUR09JXzNjOWtpQXV2Um4xTm5MRERfRW02Rlhvdjk5WUR5cGMiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ5ODUzMzg5LCJuYmYiOjE2NDk4NTMzODksImV4cCI6MTY0OTg1ODI3MCwiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQXFCc3ArU1pKb2J4RGlKcmt0OExha1dRdTlKcTk2TkZLanlscWZ0TEpoZWxLZ2M0cW9qWDZYbk1pSDVPU1dJWVpYMHJrbm9ZWStVZFd0THNxcmd6Qnh3PT0iLCJhbHRzZWNpZCI6IjU6OjEwMDMyMDAxRUE1MkI1MDIiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkdQU1R1bmVyIENvbmZpZyBUb29sIiwiYXBwaWQiOiIzZWJkYzM2Ny1iMjlhLTRjYjgtYjc2Zi0xYWYzNzVmOTlhM2IiLCJhcHBpZGFjciI6IjAiLCJlbWFpbCI6ImdhYm9yLmVybWVueWlAZ3BzdHVuZXIuY29tIiwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMTgyNWQxMjQtZjhhYS00MjliLTgxZGYtZGQ5Njg3YjUwN2U1LyIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjIxMy4yMjIuMTkxLjIzMyIsIm5hbWUiOiJnYWJvci5lcm1lbnlpIiwib2lkIjoiNmExOWM4MTYtOGM2Ny00ZDdkLTgzZDctZmZkYTMyZTM4Njc0IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxRUE0RDY5MUEiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QVBzLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIFVzZXIuUmVhZCBlbWFpbCIsInN1YiI6IkNaVlBYT1ZTVnVVVnF5R2FraE1iNlVUMVA5aVQ2aG9Kc2c0OVVUREJWdVkiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiRVUiLCJ0aWQiOiJkNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMiLCJ1bmlxdWVfbmFtZSI6ImdhYm9yLmVybWVueWlAZ3BzdHVuZXIuY29tIiwidXRpIjoiNGhOTFd6aGZfMGV1dkcwYllyZFpBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiMTNiZDFjNzItNmY0YS00ZGNmLTk4NWYtMThkM2I4MGYyMDhhIl0sInhtc19zdCI6eyJzdWIiOiJGNXUxeVFiWnI2OF9YQmp4N19DbEN6dU5IbUczRTg2cndTQnduVF8wTldzIn0sInhtc190Y2R0IjoxNTI4NzI5NzQzfQ.R2_qPPjT_yOj7TqbdECN6aYTz6yIhNC9Vluxo5VPQ0UfV-EUYjizQkvqzjcYywaXIrYkJPyj17v2OtFrkE3GaHnj8-tfNtumc5k8Qa0HiJt8oPpF5usNwKLUMXm2hHtOT6xyQcyYyYpWB-dGmKsY3rQnDQmEYRrixdieT1UOAt4rAT4XIhI-gvlY3h-OdQm96Zr0wNEgz53cgI2RLHzzv7UnBVcoMKZN1gzsjfXg0ovfhQcmBcHHlHvgaoPOWEYyl89H6TJN1vVnk0hEZNT43E3aM4IH2xpzHX_GM1twpnIpBY_uC9lZkz7iCZ4X2StuWlaKjY_oSMgSr3bqTwUJGw",
										"description": "Gabi",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6ImRTam5FWWVEM2tqazhLZkVnZjhHVnNwLWRhWGhXM09HQzYzdGVtUE5MNWciLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ4NjI5NzM0LCJuYmYiOjE2NDg2Mjk3MzQsImV4cCI6MTY0ODYzNTE1MywiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQVRBb21OWW9Ubm5nSmtFdlVtZ1lMZ0VQRkhyL2FCNkdMcGJIa3k2bDJ0NjNneml0KytsTXZOUnpHUk1WdGhYUE1QME5UVXlvM1psNzQxR1ZvakRieDZRPT0iLCJhbHRzZWNpZCI6IjU6OjEwMDMyMDAxRTI1MzAzRDUiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkdQU1R1bmVyIENvbmZpZyBUb29sIiwiYXBwaWQiOiIzZWJkYzM2Ny1iMjlhLTRjYjgtYjc2Zi0xYWYzNzVmOTlhM2IiLCJhcHBpZGFjciI6IjAiLCJlbWFpbCI6ImJvdG9uZC5iaWxpYm9rQGdwc3R1bmVyLmNvbSIsImlkcCI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzE4MjVkMTI0LWY4YWEtNDI5Yi04MWRmLWRkOTY4N2I1MDdlNS8iLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIyMTMuMjIyLjE5MS4yMzMiLCJuYW1lIjoiYm90b25kLmJpbGlib2siLCJvaWQiOiIyYTA3YTNjOC1kNWQ2LTRkMDMtYTgzMC0zOWEyNTgxNzMzM2QiLCJwbGF0ZiI6IjMiLCJwdWlkIjoiMTAwMzIwMDFFMjUyRUU1MCIsInJoIjoiMC5BVEFBQjVrWjFZQmxTRWE3TWR1aG1pZVZnd01BQUFBQUFBQUF3QUFBQUFBQUFBQXdBR2suIiwic2NwIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJzaWduaW5fc3RhdGUiOlsia21zaSJdLCJzdWIiOiJabmFEaU9GajMtRndkUTdobUNoMzVrWlVTejBwQUJFWUgyN2VKa0k1X3FFIiwidGVuYW50X3JlZ2lvbl9zY29wZSI6IkVVIiwidGlkIjoiZDUxOTk5MDctNjU4MC00NjQ4LWJiMzEtZGJhMTlhMjc5NTgzIiwidW5pcXVlX25hbWUiOiJib3RvbmQuYmlsaWJva0BncHN0dW5lci5jb20iLCJ1dGkiOiJEVjFjVHBkeGlFMngwOE85N2FRSkFBIiwidmVyIjoiMS4wIiwid2lkcyI6WyIxM2JkMWM3Mi02ZjRhLTRkY2YtOTg1Zi0xOGQzYjgwZjIwOGEiXSwieG1zX3N0Ijp7InN1YiI6IjlTemdrZjN6U2hrak02WTBvQXpQZC0tUzhfRnFFYnlMakZkekVwcUZzaDAifSwieG1zX3RjZHQiOjE1Mjg3Mjk3NDN9.VSjC_cktrkVkVbahc61B7oT6Gfi4qcafzWK6nhEt9otAziZmWSTS1kbTj68lxkyn0cXi5JElvgb3rUyGVTq7ifz1VazHyQsNncdldZnkUc4nZRZbWPn339K7Ev7UYMNqVcNF0OCXqcw28-G6fiwSaQPLoxG0RTdFPgQcY9WZdfjEgakwEsPULx5Fg_7yY7ddRQfHoflx0627q49xZiyMlO27JJanRRtEeziQCU8kaIcdiMwKSdDXcO7nI6E73vaSXZvtFOqU9zy7ViJgia1N24QkCADbpwUOfP3Uop8Pf5PwvY1mmaAScMjDhZGreng4wYr6m-uv2h2ouMTP26pHGw",
										"description": "Boti",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_server}}api/configtool/configuration/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"configuration",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "/component/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const chai = require('chai');\r",
											"const expect = chai.expect;\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check if 'success' property exists\", function () {\r",
											"    expect(pm.response.json()).to.have.property(\"success\");\r",
											"});\r",
											"pm.test(\"Check if 'data' property exists\", function () {\r",
											"    expect(pm.response.json()).to.have.property(\"data\");\r",
											"});\r",
											"pm.test(\"Check if 'data' is an array\", function () {\r",
											"    expect(pm.response.json().data).to.be.an(\"array\");\r",
											"});\r",
											"pm.test(\"Component structure of each component in 'data'\", function () {\r",
											"    const data = pm.response.json().data;\r",
											"\r",
											"    data.forEach((component) => {\r",
											"        expect(component).to.have.property(\"id\");\r",
											"        expect(component).to.have.property(\"component\");\r",
											"        expect(component).to.have.property(\"component_name\");\r",
											"        expect(component).to.have.property(\"component_class\");\r",
											"        expect(component).to.have.property(\"component_identifier\");\r",
											"        expect(component).to.have.property(\"OEM_ID\");\r",
											"        expect(component).to.have.property(\"bike_type\");\r",
											"        expect(component).to.have.property(\"created_at\");\r",
											"        expect(component).to.have.property(\"updated_at\");\r",
											"        expect(component).to.have.property(\"deleted_at\");\r",
											"        expect(component).to.have.property(\"editable\");\r",
											"    });\r",
											"});\r",
											"pm.test(\"Id, component, component_name, component_class, component_identifier, OEM_ID should not be null\", function() {\r",
											"    var responseJsonData = pm.response.json().data;\r",
											"    var propertiesToCheck = ['id', 'component_name', 'component_class', 'component_identifier', 'OEM_ID']\r",
											"    responseJsonData.forEach((data) => {\r",
											"        propertiesToCheck.forEach((property) => {\r",
											"            pm.test(property + ' is not null for component' + data.id, function(){\r",
											"                pm.expect(data[property]).not.to.be.null;\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"});\r",
											"pm.test(\"Data types of the properties within the data array\", function () {\r",
											"     pm.expect(pm.response.json().data).to.be.an('array');\r",
											"     pm.response.json().data.forEach((item) => {\r",
											"            pm.expect(item.id).to.be.a('number');\r",
											"            pm.expect(item.component).to.be.a('string');\r",
											"            pm.expect(item.component_name).to.be.a('string');\r",
											"            pm.expect(item.component_class).to.be.a('number');\r",
											"            pm.expect(item.component_identifier).to.be.a('string');\r",
											"            pm.expect(item.OEM_ID).to.be.a('number');\r",
											"            pm.expect(item.bike_type).to.be.a('number');\r",
											"            pm.expect(item.created_at).to.be.a('string');\r",
											"            pm.expect(item.updated_at).to.be.a('string');\r",
											"            pm.expect(item.deleted_at).to.be.a('string');\r",
											"            pm.expect(item.editable).to.be.a('boolean');\r",
											"     });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/component/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"component",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "/overview/bike",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Success is true', function () {",
											"    pm.expect(pm.response.json().success).to.equal(true);",
											"})",
											"",
											"pm.test('Response time is less than 1000ms', function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"})",
											"",
											"pm.test('These properties of the bikes should not be null: bike_id, bike_serial, config_id, eol_passed, eol_data, sw_release_eol, brand, OEM_ID, bike_model_name, config_name', function () {",
											"    pm.expect(pm.response.json().data).to.be.an('array');",
											"    pm.response.json().data.forEach(bike => {",
											"        pm.expect(bike.bike_id).to.not.be.null;",
											"        pm.expect(bike.bike_serial).to.not.be.null;",
											"        pm.expect(bike.config_id).to.not.be.null;",
											"        pm.expect(bike.eol_passed).to.not.be.null;",
											"        pm.expect(bike.eol_date).to.not.be.null;",
											"        pm.expect(bike.sw_release_eol).to.not.be.null;",
											"        pm.expect(bike.brand).to.not.be.null;",
											"        pm.expect(bike.OEM_ID).to.not.be.null;",
											"        pm.expect(bike.bike_model_name).to.not.be.null;",
											"        pm.expect(bike.config_name).to.not.be.null;",
											"    });",
											"})",
											"",
											"pm.test('\\'data\\' array contains objects that can have \\'components_histories\\' and \\'bike_histories\\' arrays', function () {",
											"    var responseData = pm.response.json();",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    responseData.data.forEach(item => {",
											"        pm.expect(item).to.be.an('object');",
											"        if (item.hasOwnProperty('components_histories')) {",
											"            pm.expect(item.components_histories).to.be.an('array');",
											"        }",
											"        if (item.hasOwnProperty('bike_histories')) {",
											"            pm.expect(item.bike_histories).to.be.an('array');",
											"        }",
											"    });",
											"})",
											"",
											"pm.test('Event and source properties match', function () {",
											"    var responseData = pm.response.json().data;",
											"    if (responseData) {",
											"        responseData.forEach(item => {",
											"            if (item.hasOwnProperty('bike_histories')) {",
											"                item.bike_histories.forEach(historyItem => {",
											"                    if (historyItem.event === 'BIKE_LOG_001' || historyItem.event === 'BIKE_LOG_002') {",
											"                        pm.expect(historyItem.source).to.equal('eolTool');",
											"                    } else if (historyItem.event === 'BIKE_LOG_003' || historyItem.event === 'BIKE_LOG_004') {",
											"                        pm.expect(historyItem.source).to.equal('configTool');",
											"                    }",
											"                });",
											"            }",
											"        });",
											"    }",
											"})",
											"",
											"pm.test('In the bike_histories array source and event property should not be null, if there are bike histories', function () {",
											"    pm.response.json().data.forEach(item => {",
											"        if (item.bike_histories && item.bike_histories.length > 0) {",
											"            item.bike_histories.forEach(history => {",
											"                pm.expect(history.source).to.not.be.null;",
											"                pm.expect(history.event).to.not.be.null;",
											"            });",
											"        }",
											"    });",
											"})",
											"",
											"pm.test('Component histories should not be empty', function () {",
											"    pm.expect(pm.response.json().data).to.be.an('array').and.to.have.lengthOf.at.least(1, 'Component histories should not be empty');",
											"    pm.response.json().data.forEach(item => {",
											"        pm.expect(item.components_histories).to.be.an('array').and.to.have.lengthOf.at.least(1, 'Component histories should not be empty');",
											"    });",
											"})",
											"",
											"pm.test('Bike histories should not be empty', function () {",
											"    var responsejsonData = pm.response.json().data;",
											"    responsejsonData.forEach(item => {",
											"        if (item.bike_histories) {",
											"            pm.expect(item.bike_histories).to.be.an('array').and.to.have.lengthOf.at.least(1, 'Bike histories should not be empty');",
											"        }",
											"    });",
											"})",
											"",
											"pm.test('Each object within the data array has a components histories property', function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"    pm.expect(pm.response.json().data).to.be.an('array');",
											"    pm.response.json().data.forEach(obj => {",
											"        pm.expect(obj).to.have.property('components_histories');",
											"    });",
											"})",
											"",
											"pm.test('Data types of properties within the data array', function () {",
											"    var responseJson = pm.response.json();",
											"    pm.expect(responseJson.success).to.be.a('boolean');",
											"    pm.expect(responseJson.records).to.be.a('number');",
											"    pm.expect(responseJson.page).to.be.a('number');",
											"    pm.expect(responseJson.data).to.be.an('array');",
											"    if (responseJson.data) {",
											"        responseJson.data.forEach(bike => {",
											"            pm.expect(bike.bike_id).to.be.a('number');",
											"            pm.expect(bike.bike_serial).to.be.a('string');",
											"            pm.expect(bike.config_id).to.be.a('number');",
											"            pm.expect(bike.eol_passed).to.be.a('number');",
											"            pm.expect(bike.eol_date).to.be.a('string');",
											"            pm.expect(bike.sw_release_eol).to.be.a('number');",
											"            pm.expect(bike.brand).to.be.a('string');",
											"            pm.expect(bike.OEM_ID).to.be.a('number');",
											"            pm.expect(bike.bike_model_name).to.be.a('string');",
											"            pm.expect(bike.config_name).to.be.a('string');",
											"            pm.expect(bike.approval).to.be.a('number');",
											"            pm.expect(bike.unassigned).to.be.a('number');",
											"            pm.expect(bike.config_request).to.be.a('number');",
											"            pm.expect(bike.components_histories).to.be.an('array');",
											"            if (bike.components_histories) {",
											"                bike.components_histories.forEach(component => {",
											"                    pm.expect(component.current_component).to.be.a('number');",
											"                    pm.expect(component.rollout_status).to.be.a('number');",
											"                    pm.expect(component.activation_status).to.be.a('number');",
											"                    pm.expect(component.approval_status).to.be.a('number');",
											"                });",
											"            }",
											"            if (bike.bike_histories) {",
											"                bike.bike_histories.forEach(history => {",
											"                    pm.expect(history.source).to.be.a('string');",
											"                    pm.expect(history.event).to.be.a('string');",
											"                    pm.expect(history.user_id).to.be.a('string');",
											"                    pm.expect(history.created_at).to.be.a('string');",
											"                });",
											"            }",
											"        });",
											"    }",
											"})",
											"",
											"/*pm.test(\"Each bike should have bike histories array\", function () {",
											"    var responseData = pm.response.json();",
											"    pm.expect(responseData.data).to.be.an('array');",
											"    ",
											"    var bikesWithoutHistories = [];",
											"",
											"    responseData.data.forEach((bike) => {",
											"        if (!bike.bike_histories) {",
											"            bikesWithoutHistories.push(bike.bike_id);",
											"        }",
											"    });",
											"",
											"    pm.expect(bikesWithoutHistories.length === 0, \"The following bikes have no bike histories: \" + bikesWithoutHistories.join(\", \")).to.be.true;",
											"});*/",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "order",
											"value": "serial",
											"type": "text"
										},
										{
											"key": "search[stolen]",
											"value": "0",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/overview/bike",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"overview",
										"bike"
									]
								}
							},
							"response": []
						},
						{
							"name": "/overview/bike test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Approval property is 0\", function () {",
											"     var responseData = pm.response.json();",
											"     responseData.data.forEach((bike) => {",
											"            pm.expect(bike.approval).to.equal(0);",
											"     });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "order",
											"value": "serial",
											"type": "text"
										},
										{
											"key": "search[OEM_ID]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "search[config_name]",
											"value": "Test Config Name Greg10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[bike_id]",
											"value": "2",
											"description": "this is bike serial",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[brand]",
											"value": "babboe",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[bike_model_name]",
											"value": "testbike",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[config_name]",
											"value": "Test Config Name ",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[stolen]",
											"value": "0",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[recalled]",
											"value": "0",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[approval]",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/overview/bike",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"overview",
										"bike"
									]
								}
							},
							"response": []
						},
						{
							"name": "/assignbike/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Succes is true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											"\r",
											"const responseObject = pm.response.json();\r",
											"if (responseObject.data.length > 0) {\r",
											"    const firstObject = responseObject.data[0];\r",
											"    const expectedKeys = [\r",
											"        \"id\",\r",
											"        \"unique_id\",\r",
											"        \"serial\",\r",
											"        \"eol_passed\",\r",
											"        \"eol_date\",\r",
											"        \"eol_worker\",\r",
											"        \"connection_key\",\r",
											"        \"connection_key_new\",\r",
											"        \"validated\",\r",
											"        \"sw_release_eol\",\r",
											"        \"mac_address\",\r",
											"        \"user_id\",\r",
											"        \"frame_id\",\r",
											"        \"type\",\r",
											"        \"name\",\r",
											"        \"weight\",\r",
											"        \"protocol\",\r",
											"        \"status\",\r",
											"        \"vendor_id\",\r",
											"        \"serial_id\",\r",
											"        \"setting_changed_at\",\r",
											"        \"unassigned\",\r",
											"        \"config_request\",\r",
											"        \"approval\",\r",
											"        \"created_at\",\r",
											"        \"updated_at\",\r",
											"        \"deleted_at\",\r",
											"        \"bikeId\"\r",
											"    ];\r",
											"\r",
											"    const objectKeys = Object.keys(firstObject);\r",
											"    pm.test(\"All expected keys are present\", function () {\r",
											"        expectedKeys.forEach(function (key) {\r",
											"            pm.expect(objectKeys.includes(key)).to.be.true;\r",
											"        });\r",
											"    });\r",
											"\r",
											"    pm.test(\"Unassigned property should be 0\", function () {\r",
											"        responseObject.data.forEach((item) => {\r",
											"            pm.expect(item.unassigned).to.equal(0);\r",
											"            pm.expect(item.config_request).to.equal(0)\r",
											"        });\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_server}}api/configtool/assignbike/list?configuration_id=62",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"assignbike",
										"list"
									],
									"query": [
										{
											"key": "configuration_id",
											"value": "62"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/assignbike/add invalid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Succes is true\", function () {",
											"    pm.expect(pm.response.json().success).to.eql(false);",
											"});",
											"pm.test(\"Bike id has already been taken\", function () {",
											"    var responseJSON = pm.response.json();",
											"",
											"    pm.expect(responseJSON).to.be.an('object');",
											"    pm.expect(responseJSON.failed.details['bike_id.0'][0]).to.equal(\"The selected bike_id.0 is invalid.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "configuration_id",
											"value": "61",
											"type": "text"
										},
										{
											"key": "bike_id[0]",
											"value": "stolentestgreg",
											"description": "bikeid is bikeserial",
											"type": "text"
										},
										{
											"key": "bike_serial[0]",
											"value": "8",
											"type": "text",
											"disabled": true
										},
										{
											"key": "approval",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/assignbike/add",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"assignbike",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/approvalbike/add invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Success is true', function () {",
											"    pm.expect(pm.response.json().success).to.be.false;",
											"})",
											"",
											"pm.test('Response has a success and failed property, failed is an object', function () {",
											"    var responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property('success');",
											"    pm.expect(responseJson).to.have.property('failed');",
											"})",
											"",
											"pm.test('Failed object has error and details property', function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody.failed).to.be.an('object');",
											"    pm.expect(responseBody.failed).to.have.property('error');",
											"    pm.expect(responseBody.failed).to.have.property('details');",
											"})",
											"",
											"pm.test('Details have bike_id.0 property that is an array', function () {",
											"    var responseJSON = pm.response.json();",
											"    pm.expect(responseJSON.failed.details).to.be.an('object');",
											"    pm.expect(responseJSON.failed.details['bike_id.0']).to.be.an('array');",
											"})",
											"",
											"pm.test('Error property has a value of \\'validation error (1)\\'', function () {",
											"    var responseJSON = pm.response.json();",
											"    pm.expect(responseJSON.failed.error).to.equal('validation error (1)');",
											"})",
											"",
											"pm.test(\"'bike_id.0' array has a value of 'The selected bike_id.0 is invalid'\", function () {",
											"    var responseJSON = pm.response.json();",
											"    pm.expect(responseJSON.failed.details['bike_id.0']).to.include('The selected bike_id.0 is invalid.');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bike_id[0]",
											"value": "2",
											"description": "bike serial",
											"type": "text"
										},
										{
											"key": "bike_id[1]",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "approval",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/approvalbike/add",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"approvalbike",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/approvalbike/add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test(\"Success is true\", function () {",
											"    pm.expect(pm.response.json().success).to.be.true",
											"});",
											"pm.test(\"There is a data property in the response\", function () {",
											"    var responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an('object');",
											"    pm.expect(responseJson).to.have.property('data');",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"jsonData.data.forEach(function(item){",
											"    pm.test(`Check if approval is 0 for item with id ${item[0].id}`, function(){",
											"        pm.expect(item[0].approval).to.eql(0);",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bike_id[0]",
											"value": "8DFD4FA4",
											"type": "text"
										},
										{
											"key": "bike_id[1]",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "approval",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/approvalbike/add",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"approvalbike",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "/approvalbike/list test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response to be an object', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"})\r",
											"\r",
											"pm.test('Success is true', function () {\r",
											"    pm.expect(pm.response.json().success).to.be.true;\r",
											"})\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"if (jsonData.data) {\r",
											"    jsonData.data.forEach(function (item) {\r",
											"        pm.test('Check if approval is 1 for item with id' + item.id, function () {\r",
											"            pm.expect(item.approval).to.eql(1);\r",
											"        });\r",
											"    });\r",
											"\r",
											"    pm.test(\"Data is an array\", function (){\r",
											"        pm.expect(jsonData.data).to.be.an('array');\r",
											"    });\r",
											"\r",
											"    pm.test(\"Data types of the data array\", function(){\r",
											"        jsonData.data.forEach((bike) => {\r",
											"            pm.expect(bike.id).to.be.a('number');\r",
											"            pm.expect(bike.unique_id).to.be.null;\r",
											"            pm.expect(bike.serial).to.be.null;\r",
											"            pm.expect(bike.eol_passed).to.be.a('number');\r",
											"            pm.expect(bike.eol_date).to.be.a('string');\r",
											"            pm.expect(bike.eol_worker).to.be.null;\r",
											"            pm.expect(bike.connection_key).to.be.null;\r",
											"            pm.expect(bike.connection_key_new).to.be.null;\r",
											"            pm.expect(bike.validated).to.be.null;\r",
											"            pm.expect(bike.sw_release_eol).to.be.a('string');\r",
											"            pm.expect(bike.mac_address).to.be.null;\r",
											"            pm.expect(bike.user_id).to.be.null;\r",
											"            pm.expect(bike.frame_id).to.be.null;\r",
											"            pm.expect(bike.type).to.be.null;\r",
											"            pm.expect(bike.name).to.be.null;\r",
											"            pm.expect(bike.weight).to.be.null;\r",
											"            pm.expect(bike.protocol).to.be.null;\r",
											"            pm.expect(bike.status).to.be.null;\r",
											"            pm.expect(bike.vendor_id).to.be.null;\r",
											"            pm.expect(bike.serial_id).to.be.a('string');\r",
											"            pm.expect(bike.setting_changed_at).to.be.null;\r",
											"            pm.expect(bike.unassigned).to.be.a('number');\r",
											"            pm.expect(bike.config_request).to.be.a('number');\r",
											"            pm.expect(bike.approval).to.be.a('number');\r",
											"            pm.expect(bike.created_at).to.be.a('string');\r",
											"            pm.expect(bike.updated_at).to.be.a('string');\r",
											"            pm.expect(bike.deleted_at).to.be.null;\r",
											"            pm.expect(bike.bikeId).to.be.a('string');\r",
											"        });\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_server}}api/configtool/approvalbike/list?approval=1&release_id=4",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"approvalbike",
										"list"
									],
									"query": [
										{
											"key": "approval",
											"value": "1"
										},
										{
											"key": "release_id",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/approvalbike/list test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response to be an object\", function () {\r",
											"     pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test(\"Success is true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"jsonData.data.forEach(function(item){\r",
											"    pm.test(\"Check if approval is 1 for item with id\" + item.id, function(){\r",
											"        pm.expect(item.approval === 0 || item.approval === \"null\").to.be.true\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_server}}api/configtool/approvalbike/list?approval=0",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"approvalbike",
										"list"
									],
									"query": [
										{
											"key": "approval",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/approvalbike/list test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Success must be false\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.false\r",
											"});\r",
											"pm.test(\"Success must be false\", function () {\r",
											"    pm.expect(pm.response.json().failed.error).to.equal(\"validation error\");\r",
											"});\r",
											"pm.test(\"Success must be false\", function () {\r",
											"    pm.expect(pm.response.json().failed.details.approval[0]).to.equal(\"The approval must be an integer.\");\r",
											"});\r",
											"pm.test(\"Success must be false\", function () {\r",
											"    pm.expect(pm.response.json().failed.code).to.equal(\"E001\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_server}}api/configtool/approvalbike/list?approval=dasdasda",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"approvalbike",
										"list"
									],
									"query": [
										{
											"key": "approval",
											"value": "dasdasda"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "component/stolen/add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"pm.test(\"Succes field is boolean true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.a('boolean').to.equal(true);\r",
											"});\r",
											"pm.test(\"Data field is an object\", function (){\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test(\"Data elements have 'serial' and 'id' fields\", function () {\r",
											"    pm.expect(pm.response.json().data[0]).to.have.property('serial');\r",
											"    pm.expect(pm.response.json().data[0]).to.have.property('id');\r",
											"    pm.expect(pm.response.json().data[0]).to.have.property('stolen');\r",
											"});\r",
											"pm.test(\"Stolen properties have value of 1\", function () {\r",
											"     var responseData = pm.response.json();\r",
											"     pm.expect(responseData.success).to.be.true;\r",
											"     responseData.data.forEach((item) => {\r",
											"            pm.expect(item.serial).to.have.lengthOf.at.least(1);\r",
											"            pm.expect(item.id).to.have.lengthOf.at.least(1);\r",
											"            pm.expect(item.stolen).to.equal(\"1\");\r",
											"     });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bikes[0][component][0][serial]",
											"value": "CoreHMIBLEgreg",
											"type": "text"
										},
										{
											"key": "bikes[0][component][0][id]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "bikes[0][component][1][serial]",
											"value": "testgreg2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bikes[0][component][1][id]",
											"value": "11",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bikes[0][component][0][stolen]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bikes[0][component][1][stolen]",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bikes[0][bike_id]",
											"value": "GregsBiketest",
											"type": "text"
										},
										{
											"key": "bikes[0][stolen_bike_id]",
											"value": "stolentestgreg",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bikes[0][stolen]",
											"value": "0",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/component/stolen/add",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"component",
										"stolen",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "component/stolen/delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"pm.test(\"Succes field is boolean true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.a('boolean').to.equal(true);\r",
											"});\r",
											"pm.test(\"Data field is an object\", function (){\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test(\"Data is an array\", function () {\r",
											"    pm.expect(pm.response.json().data).to.be.an('array');\r",
											"});\r",
											"pm.test(\"Data have id and components properties\", function () {\r",
											"     var responseData = pm.response.json();\r",
											"     pm.expect(responseData).to.be.an('object');\r",
											"     pm.expect(responseData).to.have.property('data');\r",
											"     pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
											"     responseData.data.forEach((item) => {\r",
											"            pm.expect(item).to.have.property('id');\r",
											"            pm.expect(item).to.have.property('components');\r",
											"     });\r",
											"});\r",
											"pm.test(\"Copmponents array have stolen and id properties\", function () {\r",
											"    var responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    responseData.data.forEach((data) => {\r",
											"     data.components.forEach((component) => {\r",
											"        pm.expect(component).to.have.property('stolen');\r",
											"        pm.expect(component).to.have.property('id');\r",
											"     });\r",
											"    });\r",
											"});\r",
											"pm.test(\"All stolen properties is 0\", function () {\r",
											"    var responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    responseData.data.forEach((data) => {\r",
											"     data.components.forEach((component) => {\r",
											"        pm.expect(component.stolen).to.equal(\"0\");\r",
											"     });\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bike[0][id]",
											"value": "GregsBiketest",
											"type": "text"
										},
										{
											"key": "bike[0][serial]",
											"value": "s",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bike[0][components][0][stolen]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bike[0][components][0][id]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "bike[0][components][1][stolen]",
											"value": "0",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bike[0][components][1][id]",
											"value": "21",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/component/stolen/delete",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"component",
										"stolen",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "component/recalled/add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"pm.test(\"Succes field is boolean true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.a('boolean').to.equal(true);\r",
											"});\r",
											"pm.test(\"Data field is an object\", function (){\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test(\"Data elements have 'serial' and 'id' fields\", function () {\r",
											"    pm.expect(pm.response.json().data[0]).to.have.property('serial');\r",
											"    pm.expect(pm.response.json().data[0]).to.have.property('id');\r",
											"    pm.expect(pm.response.json().data[0]).to.have.property('recalled');\r",
											"});\r",
											"pm.test(\"Stolen properties have value of 1\", function () {\r",
											"     var responseData = pm.response.json();\r",
											"     pm.expect(responseData.success).to.be.true;\r",
											"     responseData.data.forEach((item) => {\r",
											"            pm.expect(item.serial).to.have.lengthOf.at.least(1);\r",
											"            pm.expect(item.id).to.have.lengthOf.at.least(1);\r",
											"            pm.expect(item.recalled).to.equal(\"1\");\r",
											"     });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bikes[0][component][0][serial]",
											"value": "CoreHMIBLEgreg",
											"type": "text"
										},
										{
											"key": "bikes[0][component][0][id]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "bikes[0][component][1][serial]",
											"value": "10D0400002",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bikes[0][component][1][id]",
											"value": "11",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bikes[0][component][0][recalled]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "bikes[0][component][1][recalled]",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bikes[1][bike_id]",
											"value": "66E28409",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bikes[0][bike_id]",
											"value": "GregsBiketest",
											"type": "text"
										},
										{
											"key": "bikes[0][stolen_bike_id]",
											"value": "stolentestgreg",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bikes[0][stolen]",
											"value": "0",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/component/recalled/add",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"component",
										"recalled",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "component/recalled/delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.be.empty;\r",
											"});\r",
											"pm.test(\"Succes field is boolean true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.a('boolean').to.equal(true);\r",
											"});\r",
											"pm.test(\"Data field is an object\", function (){\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test(\"Copmponents array have stolen and id properties\", function () {\r",
											"    var responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    responseData.data.forEach((data) => {\r",
											"     data.components.forEach((component) => {\r",
											"        pm.expect(component).to.have.property('recalled');\r",
											"        pm.expect(component).to.have.property('id');\r",
											"     });\r",
											"    });\r",
											"});\r",
											"pm.test(\"All stolen properties is 0\", function () {\r",
											"    var responseData = pm.response.json();\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    responseData.data.forEach((data) => {\r",
											"     data.components.forEach((component) => {\r",
											"        pm.expect(component.recalled).to.equal(\"0\");\r",
											"     });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "bike[0][id]",
											"value": "GregsBiketest",
											"type": "text"
										},
										{
											"key": "bike[0][serial]",
											"value": "as",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bike[0][components][0][recalled]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "bike[0][components][0][id]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "bike[0][components][1][recalled]",
											"value": "0",
											"type": "text",
											"disabled": true
										},
										{
											"key": "bike[0][components][1][id]",
											"value": "21",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/component/recalled/delete",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"component",
										"recalled",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "/component/stolen/list 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Succes is true\", function () {\r",
											"     pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											"pm.test(\"Page is 1\", function (){\r",
											"    pm.expect(pm.response.json().page).to.equal(1);\r",
											"});\r",
											"pm.test(\"Expect 'data' to be an array\", function (){\r",
											"    pm.expect(pm.response.json().data).to.be.an('array');\r",
											"});\r",
											"pm.test(\"Json structure test\", function () {\r",
											"     var responseObject = pm.response.json();\r",
											"     pm.expect(responseObject).to.be.an('object');\r",
											"     if(responseObject.records == 0){\r",
											"        pm.expect(responseObject.success).to.be.true;\r",
											"        pm.expect(responseObject.records).to.equal(0);\r",
											"        pm.expect(responseObject.page).to.equal(0);\r",
											"        pm.expect(responseObject.data).to.be.an('array').that.is.empty;\r",
											"        pm.expect(responseObject.success).to.be.a('boolean');\r",
											"        pm.expect(responseObject.records).to.be.a('number');\r",
											"        pm.expect(responseObject.page).to.be.a('number');\r",
											"        pm.expect(responseObject.data).to.be.a('array');\r",
											"        }\r",
											"    else{\r",
											"        var responseData = pm.response.json();\r",
											"        pm.expect(responseData).to.be.an('object');\r",
											"        pm.expect(responseData.success).to.be.a('boolean');\r",
											"        pm.expect(responseData.records).to.be.a('number');\r",
											"        pm.expect(responseData.page).to.be.a('number');\r",
											"        responseData.data.forEach((item) => {\r",
											"            pm.expect(item.serial).to.be.a('string');\r",
											"            pm.expect(item.kind).to.be.a('number');\r",
											"            pm.expect(item.component_id).to.be.a('number');\r",
											"            pm.expect(item.bike_id).to.be.a('string');\r",
											"            pm.expect(item.OEM_ID).to.be.a('number');\r",
											"            pm.expect(item.stolen).to.be.a('number');\r",
											"            pm.expect(item.recalled).to.be.a('number');\r",
											"            pm.expect(item.last_modification).to.be.a('string');\r",
											"\r",
											"            pm.expect(item.stolen).to.equal(0); //Value of all stolen property should be zero\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "order",
											"value": "serial",
											"type": "text"
										},
										{
											"key": "direction",
											"value": "asc",
											"type": "text"
										},
										{
											"key": "page",
											"value": "1",
											"type": "text"
										},
										{
											"key": "search[kind]",
											"value": "Core",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[bike_id]",
											"value": "105",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[component_id]",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[OEM_ID]",
											"value": "2",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[stolen]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "search[recalled]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "recordPerPage",
											"value": "50",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/component/stolen/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"component",
										"stolen",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "/component/stolen/list 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Succes is true\", function () {\r",
											"     pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											"pm.test(\"Expect 'data' to be an array\", function (){\r",
											"    pm.expect(pm.response.json().data).to.be.an('array');\r",
											"});\r",
											"pm.test(\"Json structure test\", function () {\r",
											"     var responseObject = pm.response.json();\r",
											"     pm.expect(responseObject).to.be.an('object');\r",
											"     if(responseObject.records == 0){\r",
											"        pm.expect(responseObject.success).to.be.true;\r",
											"        pm.expect(responseObject.records).to.equal(0);\r",
											"        pm.expect(responseObject.page).to.equal(0);\r",
											"        pm.expect(responseObject.data).to.be.an('array').that.is.empty;\r",
											"        pm.expect(responseObject.success).to.be.a('boolean');\r",
											"        pm.expect(responseObject.records).to.be.a('number');\r",
											"        pm.expect(responseObject.page).to.be.a('number');\r",
											"        pm.expect(responseObject.data).to.be.a('array');\r",
											"        }\r",
											"    else{\r",
											"        var responseData = pm.response.json();\r",
											"        pm.expect(responseData).to.be.an('object');\r",
											"        pm.expect(responseData.success).to.be.a('boolean');\r",
											"        pm.expect(responseData.records).to.be.a('number');\r",
											"        pm.expect(responseData.page).to.be.a('number');\r",
											"        responseData.data.forEach((item) => {\r",
											"            pm.expect(item.serial).to.be.a('string');\r",
											"            pm.expect(item.kind).to.be.a('number');\r",
											"            pm.expect(item.component_id).to.be.a('number');\r",
											"            pm.expect(item.bike_id).to.be.a('string');\r",
											"            pm.expect(item.OEM_ID).to.be.a('number');\r",
											"            pm.expect(item.stolen).to.be.a('number');\r",
											"            pm.expect(item.recalled).to.be.a('number');\r",
											"            pm.expect(item.last_modification).to.be.a('string');\r",
											"\r",
											"            pm.expect(item.stolen).to.equal(1); //Value of all stolen property should be 1\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "order",
											"value": "serial",
											"type": "text"
										},
										{
											"key": "direction",
											"value": "asc",
											"type": "text"
										},
										{
											"key": "page",
											"value": "1",
											"type": "text"
										},
										{
											"key": "search[kind]",
											"value": "Core",
											"type": "text"
										},
										{
											"key": "search[bike_id]",
											"value": "105",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[component_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "search[OEM_ID]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "search[stolen]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "search[recalled]",
											"value": "1",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/component/stolen/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"component",
										"stolen",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "/component/recalled/list 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Succes is true\", function () {\r",
											"     pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											"pm.test(\"Page is 1\", function (){\r",
											"    pm.expect(pm.response.json().page).to.equal(1);\r",
											"});\r",
											"pm.test(\"Expect 'data' to be an array\", function (){\r",
											"    pm.expect(pm.response.json().data).to.be.an('array');\r",
											"});\r",
											"pm.test(\"Json structure test\", function () {\r",
											"     var responseObject = pm.response.json();\r",
											"     pm.expect(responseObject).to.be.an('object');\r",
											"     if(responseObject.records == 0){\r",
											"        pm.expect(responseObject.success).to.be.true;\r",
											"        pm.expect(responseObject.records).to.equal(0);\r",
											"        pm.expect(responseObject.page).to.equal(0);\r",
											"        pm.expect(responseObject.data).to.be.an('array').that.is.empty;\r",
											"        pm.expect(responseObject.success).to.be.a('boolean');\r",
											"        pm.expect(responseObject.records).to.be.a('number');\r",
											"        pm.expect(responseObject.page).to.be.a('number');\r",
											"        pm.expect(responseObject.data).to.be.a('array');\r",
											"        }\r",
											"    else{\r",
											"        var responseData = pm.response.json();\r",
											"        pm.expect(responseData).to.be.an('object');\r",
											"        pm.expect(responseData.success).to.be.a('boolean');\r",
											"        pm.expect(responseData.records).to.be.a('number');\r",
											"        pm.expect(responseData.page).to.be.a('number');\r",
											"        responseData.data.forEach((item) => {\r",
											"            pm.expect(item.serial).to.be.a('string');\r",
											"            pm.expect(item.kind).to.be.a('number');\r",
											"            pm.expect(item.component_id).to.be.a('number');\r",
											"            pm.expect(item.bike_id).to.be.a('string');\r",
											"            pm.expect(item.OEM_ID).to.be.a('number');\r",
											"            pm.expect(item.stolen).to.be.a('number');\r",
											"            pm.expect(item.recalled).to.be.a('number');\r",
											"            pm.expect(item.last_modification).to.be.a('string');\r",
											"\r",
											"            pm.expect(item.recalled).to.equal(0); //Value of all recalled property should be zero\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "order",
											"value": "recalled",
											"type": "text"
										},
										{
											"key": "page",
											"value": "1",
											"type": "text"
										},
										{
											"key": "direction",
											"value": "asc",
											"type": "text"
										},
										{
											"key": "search[recalled]",
											"value": "0",
											"type": "text"
										},
										{
											"key": "search[component_id]",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[OEM_ID]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "search[serial]",
											"value": "Core HMI",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[stolen]",
											"value": "1",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/component/recalled/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"component",
										"recalled",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "/component/recalled/list 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Succes is true\", function () {\r",
											"     pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											"pm.test(\"Expect 'data' to be an array\", function (){\r",
											"    pm.expect(pm.response.json().data).to.be.an('array');\r",
											"});\r",
											"pm.test(\"Json structure test\", function () {\r",
											"     var responseObject = pm.response.json();\r",
											"     pm.expect(responseObject).to.be.an('object');\r",
											"     if(responseObject.records == 0){\r",
											"        pm.expect(responseObject.success).to.be.true;\r",
											"        pm.expect(responseObject.records).to.equal(0);\r",
											"        pm.expect(responseObject.page).to.equal(0);\r",
											"        pm.expect(responseObject.data).to.be.an('array').that.is.empty;\r",
											"        pm.expect(responseObject.success).to.be.a('boolean');\r",
											"        pm.expect(responseObject.records).to.be.a('number');\r",
											"        pm.expect(responseObject.page).to.be.a('number');\r",
											"        pm.expect(responseObject.data).to.be.a('array');\r",
											"        }\r",
											"    else{\r",
											"        var responseData = pm.response.json();\r",
											"        pm.expect(responseData).to.be.an('object');\r",
											"        pm.expect(responseData.success).to.be.a('boolean');\r",
											"        pm.expect(responseData.records).to.be.a('number');\r",
											"        pm.expect(responseData.page).to.be.a('number');\r",
											"        responseData.data.forEach((item) => {\r",
											"            pm.expect(item.serial).to.be.a('string');\r",
											"            pm.expect(item.kind).to.be.a('number');\r",
											"            pm.expect(item.component_id).to.be.a('number');\r",
											"            pm.expect(item.bike_id).to.be.a('string');\r",
											"            pm.expect(item.OEM_ID).to.be.a('number');\r",
											"            pm.expect(item.stolen).to.be.a('number');\r",
											"            pm.expect(item.recalled).to.be.a('number');\r",
											"            pm.expect(item.last_modification).to.be.a('string');\r",
											"\r",
											"            pm.expect(item.recalled).to.equal(1); //Value of all recalled property should be 1\r",
											"        });\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "order",
											"value": "recalled",
											"type": "text"
										},
										{
											"key": "page",
											"value": "1",
											"type": "text"
										},
										{
											"key": "direction",
											"value": "asc",
											"type": "text"
										},
										{
											"key": "search[recalled]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "search[component_id]",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[OEM_ID]",
											"value": "2",
											"type": "text"
										},
										{
											"key": "search[serial]",
											"value": "Core HMI",
											"type": "text",
											"disabled": true
										},
										{
											"key": "search[stolen]",
											"value": "1",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/component/recalled/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"component",
										"recalled",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "/release/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Success is true\", function () {\r",
											"     pm.expect(pm.response.json().success).to.equal(true);\r",
											"});\r",
											"pm.test(\"Respsonse is an object\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test(\"Data is an array\", function () {\r",
											"    pm.expect(pm.response.json().data).to.be.an('array');\r",
											"});\r",
											"\r",
											"pm.test(\"Data array has a release components and a rollouts array\", function () {\r",
											"    var responseData = pm.response.json();\r",
											"    responseData.data.forEach((item) => {\r",
											"     pm.expect(item.releases_components).to.be.an('array');\r",
											"     pm.expect(item.rollouts).to.be.an('object');\r",
											"     pm.expect(item.approval_rollouts).to.be.an('object');\r",
											"     pm.expect(item.releases_components).to.be.an('array');\r",
											"    });\r",
											"});\r",
											"\r",
											"/*pm.test(\"IDs, release versions, and release names should be unique\", function () {\r",
											"    const release = pm.response.json().data;\r",
											"    const ids = new Set();\r",
											"    const versions = new Set();\r",
											"    const names = new Set();\r",
											"\r",
											"    release.forEach(release => {\r",
											"        pm.expect(ids.has(release.id)).to.be.false;\r",
											"        ids.add(release.id);\r",
											"        console.log(release.id);\r",
											"        pm.expect(versions.has(release.release_version)).to.be.false;\r",
											"        versions.add(release.release_version);\r",
											"        console.log(release.release_version);\r",
											"        pm.expect(names.has(release.release_name)).to.be.false;\r",
											"        names.add(release.release_name);   \r",
											"        console.log(release.release_name); \r",
											"    });\r",
											"});*/\r",
											"\r",
											"pm.test(\"Release id, release versions, and release names should not be null\", function () {\r",
											"    const releases = pm.response.json().data;\r",
											"   \r",
											"    releases.forEach(releases => {\r",
											"        pm.expect(releases.id).to.not.be.null;\r",
											"        pm.expect(releases.release_version).to.not.be.null;\r",
											"        pm.expect(releases.release_name).to.not.be.null;\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Unique component IDs within releases\", function () {\r",
											"    const releases = pm.response.json().data;\r",
											"\r",
											"    releases.forEach(release => {\r",
											"        const componentIds = new Set();\r",
											"        release.releases_components.forEach(component => {\r",
											"            pm.expect(componentIds.has(component.id)).to.be.false;\r",
											"            componentIds.add(component.id);\r",
											"        });\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Check that configuration_id, oem_id and release_id is not null\", function () {\r",
											"    const releases = pm.response.json().data;\r",
											"\r",
											"    releases.forEach(release => {\r",
											"        release.releases_components.forEach(component => {\r",
											"        pm.expect(component.configuration_id).not.to.be.null;\r",
											"        pm.expect(component.oem_id).not.to.be.null;\r",
											"        pm.expect(component.release_id).not.to.be.null;\r",
											"        });\r",
											"    });\r",
											"});\r",
											"pm.test(\"Releases components should not be an empty array\", function () {\r",
											"    var responseJSONData = pm.response.json().data;\r",
											"    responseJSONData.forEach((component) => {\r",
											"        pm.expect(component.releases_components).to.be.an('array').that.is.not.empty;\r",
											"    });   \r",
											"});\r",
											"pm.test(\"Configuration id array should not be empty in releases components\", function () {\r",
											"    var responseJSON = pm.response.json();\r",
											"    responseJSON.data.forEach((release) => {\r",
											"    pm.expect(release.releases_components).to.be.an('array');\r",
											"     release.releases_components.forEach((component) => {\r",
											"        pm.expect(component.configuration_id).to.be.an('array').that.is.not.empty;        \r",
											"     });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/release/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"release",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "overview/release/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Success is true', function () {",
											"    pm.expect(pm.response.json().success).to.equal(true);",
											"})",
											"",
											"pm.test('Respsonse is an object', function () {",
											"    pm.expect(pm.response.json()).to.be.an('object');",
											"})",
											"",
											"pm.test('Data is an object', function () {",
											"    pm.expect(pm.response.json().data).to.be.an('object');",
											"})",
											"",
											"pm.test('Data array has a release components, logbook and a rollouts array', function () {",
											"    var responseJSON = pm.response.json().data;",
											"    pm.expect(responseJSON.releases_components).to.be.an('array');",
											"    pm.expect(responseJSON.release_logbook).to.be.an('array');",
											"    pm.expect(responseJSON.rollouts).to.be.an('array');",
											"})",
											"",
											"pm.test('Release id, release versions, and release names should not be null', function () {",
											"    const release = pm.response.json().data;",
											"    pm.expect(release.id).to.not.be.null;",
											"    pm.expect(release.release_version).to.not.be.null;",
											"    pm.expect(release.release_name).to.not.be.null;",
											"})",
											"",
											"pm.test('In releases components, id component name, version, oem_id, filename, hexfile, filesize, md5 can not be null', function () {",
											"    var responseJSON = pm.response.json().data;",
											"   ",
											"    responseJSON.releases_components.forEach(function(component) {",
											"        pm.expect(component.id).to.not.be.null;",
											"        pm.expect(component.component_name).to.not.be.null;",
											"        pm.expect(component.version).to.not.be.null;",
											"        pm.expect(component.OEM_ID).to.not.be.null;",
											"        pm.expect(component.filename).to.not.be.null;",
											"        pm.expect(component.hexfile).to.not.be.null;",
											"        pm.expect(component.filesize).to.not.be.null;",
											"        pm.expect(component.md5).to.not.be.null;",
											"    });",
											"});",
											"pm.test(\"Properties and their data types\", function() {",
											"    var responseData = pm.response.json();",
											"    var data = responseData.data;",
											"",
											"    pm.expect(data).to.be.an('object');",
											"",
											"    pm.expect(data).to.have.property('id').that.is.a('number');",
											"    pm.expect(data).to.have.property('file').that.is.null;",
											"    pm.expect(data).to.have.property('release_version').that.is.a('string');",
											"    pm.expect(data).to.have.property('release_name').that.is.null;",
											"    pm.expect(data).to.have.property('major').that.is.a('number');",
											"    pm.expect(data).to.have.property('minor').that.is.a('number');",
											"    pm.expect(data).to.have.property('bugfix').that.is.a('number');",
											"    pm.expect(data).to.have.property('dependent_on_release').that.is.null;",
											"    pm.expect(data).to.have.property('locked').that.is.a('number');",
											"    pm.expect(data).to.have.property('mandatory_release').that.is.a('number');",
											"    pm.expect(data).to.have.property('release_notes').that.is.a('string');",
											"    pm.expect(data).to.have.property('new_release').that.is.a('number');",
											"    pm.expect(data).to.have.property('releases_components').that.is.an('array');",
											"    pm.expect(data).to.have.property('release_logbook').that.is.an('array');",
											"    pm.expect(data).to.have.property('rollouts').that.is.an('array');",
											"",
											"    data.releases_components.forEach(function(component) {",
											"        pm.expect(component).to.have.property('id').that.is.a('number');",
											"        pm.expect(component).to.have.property('component_name').that.is.a('string');",
											"        pm.expect(component).to.have.property('version').that.is.a('string');",
											"        pm.expect(component).to.have.property('OEM_ID').that.is.a('number');",
											"        pm.expect(component).to.have.property('filename').that.is.a('string');",
											"        pm.expect(component).to.have.property('file').that.is.a('string');",
											"        pm.expect(component).to.have.property('filesize').that.is.a('number');",
											"        pm.expect(component).to.have.property('approval_status').that.is.a('number');",
											"        pm.expect(component).to.have.property('activation_status').that.is.a('number');",
											"        pm.expect(component).to.have.property('rollout_status').that.is.null;",
											"        pm.expect(component).to.have.property('md5').that.is.a('string');",
											"        pm.expect(component).to.have.property('version_for_calculate').that.is.a('string');",
											"        pm.expect(component).to.have.property('dependency').that.is.null;",
											"        pm.expect(component).to.have.property('order').that.is.null;",
											"        pm.expect(component).to.have.property('created_at').that.is.a('string');",
											"    });",
											"",
											"    data.release_logbook.forEach(function(log) {",
											"        pm.expect(log).to.have.property('id').that.is.a('number');",
											"        pm.expect(log).to.have.property('event').that.is.a('string');",
											"        pm.expect(log).to.have.property('user_id').that.is.a('string');",
											"        pm.expect(log).to.have.property('description').that.is.a('string');",
											"        pm.expect(log).to.have.property('date').that.is.a('string');",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/overview/release/1",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"overview",
										"release",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "/release/update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response is an object\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"/*pm.test(\"Release id is correct\", function () {\r",
											"     var responseData = pm.response.json();\r",
											"     pm.expect(responseData).to.be.an('object');\r",
											"     pm.expect(responseData.data).to.be.an('array');\r",
											"     responseData.data.forEach((release) => {\r",
											"            pm.expect(release).to.have.property('id').to.equal(1);\r",
											"            console.log(release.id);\r",
											"     });\r",
											"});*/\r",
											"\r",
											"pm.test(\"Data types of properties\", function() {\r",
											"    var responseData = pm.response.json();\r",
											"    var data = responseData.data;\r",
											"\r",
											"    pm.expect(data).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    data.forEach(function(item) {\r",
											"        pm.expect(item).to.be.an('object');\r",
											"        pm.expect(item).to.have.property('id').that.is.a('number');\r",
											"        pm.expect(item).to.have.property('file').that.is.null;\r",
											"        pm.expect(item).to.have.property('release_version').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('release_name').that.is.null;\r",
											"        pm.expect(item).to.have.property('major').that.is.a('number');\r",
											"        pm.expect(item).to.have.property('minor').that.is.a('number');\r",
											"        pm.expect(item).to.have.property('bugfix').that.is.a('number');\r",
											"        pm.expect(item).to.have.property('dependent_on_release').that.is.null;\r",
											"        pm.expect(item).to.have.property('locked').that.is.a('number');\r",
											"        pm.expect(item).to.have.property('mandatory_release').that.is.a('number');\r",
											"        pm.expect(item).to.have.property('release_notes').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('new_release').that.is.a('number');\r",
											"        pm.expect(item).to.have.property('created_at').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('updated_at').that.is.a('string');\r",
											"        pm.expect(item).to.have.property('deleted_at').that.is.null;\r",
											"        pm.expect(item).to.have.property('release_version_for_calculate').that.is.a('string');\r",
											"\r",
											"        var releaseComponents = item.release_components;\r",
											"        pm.expect(releaseComponents).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"        releaseComponents.forEach(function(component) {\r",
											"            pm.expect(component).to.be.an('object');\r",
											"            pm.expect(component).to.have.property('id').that.is.a('number');\r",
											"            pm.expect(component).to.have.property('component_id').that.is.a('number');\r",
											"            pm.expect(component).to.have.property('release_id').that.is.a('number');\r",
											"            pm.expect(component).to.have.property('file').that.is.a('string'); // File should be null\r",
											"            pm.expect(component).to.have.property('filename').that.is.a('string');\r",
											"            pm.expect(component).to.have.property('filesize').that.is.a('number');\r",
											"            pm.expect(component).to.have.property('approval_status').that.is.a('number');\r",
											"            pm.expect(component).to.have.property('activation_status').that.is.a('number');\r",
											"            pm.expect(component).to.have.property('rollout_status').that.is.null;\r",
											"            pm.expect(component).to.have.property('approval_rollout_id').that.is.null;\r",
											"            pm.expect(component).to.have.property('md5').that.is.a('string');\r",
											"            pm.expect(component).to.have.property('version').that.is.a('string');\r",
											"            pm.expect(component).to.have.property('dependency').that.is.null;\r",
											"            pm.expect(component).to.have.property('application').that.is.null;\r",
											"            pm.expect(component).to.have.property('DependencySkipOnParamRewrite').that.is.null;\r",
											"            pm.expect(component).to.have.property('order').that.is.null;\r",
											"            pm.expect(component).to.have.property('created_at').that.is.a('string');\r",
											"            pm.expect(component).to.have.property('updated_at').that.is.a('string');\r",
											"            pm.expect(component).to.have.property('deleted_at').that.is.null;\r",
											"            pm.expect(component).to.have.property('version_for_calculate').that.is.a('string');\r",
											"            pm.expect(component).to.have.property('dependency_for_calculate').that.is.null;\r",
											"            pm.expect(component).to.have.property('component_name').that.is.a('string');\r",
											"        });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "release_component",
											"value": "[{\"component_id\":20}] ",
											"type": "text"
										},
										{
											"key": "approval_status",
											"value": "3",
											"type": "text"
										},
										{
											"key": "activation_status",
											"value": "2",
											"type": "text"
										},
										{
											"key": "rollout_status",
											"value": "2",
											"type": "text"
										},
										{
											"key": "id",
											"value": "16",
											"type": "text"
										},
										{
											"key": "release_version",
											"value": "1.0.2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/release/update",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"release",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "/release/delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check success property and its data type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"success\");\r",
											"    pm.expect(jsonData.success).to.be.a(\"boolean\");\r",
											"});\r",
											"pm.test(\"Check failed property and its data type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"failed\");\r",
											"    pm.expect(jsonData.failed).to.be.an(\"object\");\r",
											"});\r",
											"pm.test(\"Check code property under failed and its data type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.failed).to.have.property(\"code\");\r",
											"    pm.expect(jsonData.failed.code).to.be.a(\"string\");\r",
											"});\r",
											"pm.test(\"Check error property under failed and its data type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.failed).to.have.property(\"error\");\r",
											"    pm.expect(jsonData.failed.error).to.be.a(\"string\");\r",
											"});\r",
											"pm.test(\"Check details property under failed and its data type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.failed).to.have.property(\"details\");\r",
											"    pm.expect(jsonData.failed.details).to.be.an(\"object\");\r",
											"});\r",
											"pm.test(\"Check id property under details and its data type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.failed.details).to.have.property(\"id\");\r",
											"    pm.expect(jsonData.failed.details.id).to.be.an(\"array\");\r",
											"});\r",
											"pm.test(\"Check success property value\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.equal(false);\r",
											"});\r",
											"pm.test(\"Check code property value under failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.failed.code).to.equal(\"E001\");\r",
											"});\r",
											"pm.test(\"Check error property value under failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.failed.error).to.equal(\"validation error\");\r",
											"});\r",
											"pm.test(\"Check id property value under details\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.failed.details.id[0]).to.equal(\"The selected id is invalid.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "id",
											"value": "294asdad",
											"type": "text"
										},
										{
											"key": "token",
											"value": "3",
											"type": "default",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/release/delete",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"release",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "/rollout/grouplist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Succes is true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											"pm.test(\"Response is an object\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test(\"Data is an array\", function() {\r",
											"    pm.expect(pm.response.json().data).be.an('array');\r",
											"});\r",
											"pm.test(\"The objects of the data array consists of 'id', 'reciever_group' and 'assigned_bikes' properties\", function (){\r",
											"    const jsonData = pm.response.json().data;\r",
											"    jsonData.forEach((item) => {\r",
											"      var notesJsonStructure = ['id', 'receiver_group', 'assigned_bikes'];\r",
											"      while(item <= 0);\r",
											"      pm.expect(item).to.have.all.keys(notesJsonStructure); \r",
											"      });\r",
											"});\r",
											"pm.test(\"Check success property\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.be.true;\r",
											"    pm.expect(typeof jsonData.success).to.equal(\"boolean\");\r",
											"});\r",
											"pm.test(\"Check data property\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"pm.test(\"Check properties and data types of each object in data array\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(function (item) {\r",
											"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
											"        pm.expect(item).to.have.property(\"receiver_group\").that.is.a(\"string\");\r",
											"        pm.expect(item).to.have.property(\"assigned_bikes\").that.is.a(\"number\");\r",
											"    });\r",
											"});\r",
											"pm.test(\"Check specific values of properties in each object\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.data.forEach(function (item) {\r",
											"        pm.expect(item.id).to.be.at.least(0);\r",
											"        pm.expect(item.receiver_group).to.be.a(\"string\").and.not.be.empty;  \r",
											"        pm.expect(item.assigned_bikes).to.be.a(\"number\").and.be.at.least(0); \r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/rollout/grouplist",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"rollout",
										"grouplist"
									]
								}
							},
							"response": []
						},
						{
							"name": "/rollout/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Succes is true\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.true;\r",
											"});\r",
											"pm.test(\"Response is an object\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"pm.test(\"Data is an array\", function() {\r",
											"    pm.expect(pm.response.json().data).be.an('array');\r",
											"});\r",
											"pm.test(\"There can be multiple releases in the rollout\", function () {\r",
											"     var responseJSON = pm.response.json();\r",
											"     pm.expect(responseJSON.data).to.be.an('array');\r",
											"     responseJSON.data.forEach((release) => {\r",
											"            pm.expect(release).to.have.property('release_id');\r",
											"            pm.expect(release).to.have.property('component_id');\r",
											"            pm.expect(release).to.have.property('OEM_ID');\r",
											"            pm.expect(release).to.have.property('release_notes');\r",
											"            pm.expect(release).to.have.property('filename');\r",
											"            pm.expect(release).to.have.property('filesize');\r",
											"            pm.expect(release).to.have.property('md5');\r",
											"            pm.expect(release).to.have.property('release_version');\r",
											"            pm.expect(release).to.have.property('activation_status');\r",
											"            pm.expect(release).to.have.property('approval_status');\r",
											"            pm.expect(release).to.have.property('logs');\r",
											"            pm.expect(release).to.have.property('rollouts');\r",
											"     });\r",
											"});\r",
											"pm.test(\"Software/Release properties can not be null\", function () {\r",
											"     var responseData = pm.response.json();\r",
											"\r",
											"     pm.expect(responseData).to.be.an('object');\r",
											"     pm.expect(responseData.data).to.be.an('array');\r",
											"\r",
											"     responseData.data.forEach((release) => {\r",
											"        \r",
											"        pm.expect(release.release_id, \"Release ID is null\").not.be.null;\r",
											"        pm.expect(release.component_id, \"Component ID is null in release with ID: \" + release.release_id).not.be.null;\r",
											"        pm.expect(release.OEM_ID, \"OEM ID is null in release with ID: \" + release.release_id).not.be.null;\r",
											"        pm.expect(release.release_notes, \"Release notes are null in release with ID: \" + release.release_id).not.be.null;\r",
											"        pm.expect(release.filename, \"Filename is null in release with ID: \" + release.release_id).not.be.null;\r",
											"        pm.expect(release.filesize, \"Filesize is null in release with ID: \" + release.release_id).not.be.null;\r",
											"        pm.expect(release.md5, \"MD5 is null in release with ID: \" + release.release_id).not.be.null;\r",
											"        pm.expect(release.release_version, \"Release version is null in release with ID: \" + release.release_id).not.be.null;\r",
											"        pm.expect(release.activation_status, \"Activation status is null in release with ID: \" + release.release_id).not.be.null;\r",
											"        pm.expect(release.approval_status, \"Approval status is null in release with ID: \" + release.release_id).not.be.null;\r",
											"\r",
											"        release.logs.forEach((log) => {\r",
											"            \r",
											"            pm.expect(log.id, \"Log ID is null in release with ID: \" + release.release_id).not.be.null;\r",
											"            pm.expect(log.user_id, \"User ID is null in release with ID: \" + release.release_id).not.be.null;\r",
											"            pm.expect(log.release_id, \"Release ID is null in release with ID: \" + release.release_id).not.be.null;\r",
											"            pm.expect(log.event, \"Event is null in release with ID: \" + release.release_id).not.be.null;\r",
											"            pm.expect(log.description, \"Description is null in release with ID: \" + release.release_id).not.be.null;\r",
											"            pm.expect(log.activation_date, \"Activation date is null in release with ID: \" + release.release_id).not.be.null;\r",
											"            pm.expect(log.deactivation_date, \"Deactivation date is null in release with ID: \" + release.release_id).not.be.null;\r",
											"            pm.expect(log.created_at, \"Creation date is null in release with ID: \" + release.release_id).not.be.null;\r",
											"            pm.expect(log.updated_at, \"Update date is null in release with ID: \" + release.release_id).not.be.null;\r",
											"        });\r",
											"\r",
											"        pm.expect(release.rollouts).to.be.an('array');\r",
											"     });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/rollout/approval_rollout_list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"rollout",
										"approval_rollout_list"
									]
								}
							},
							"response": []
						},
						{
							"name": "/rolloutphased/list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/rolloutphased/list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"rolloutphased",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "/approval_rollout_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {\r",
											"    pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"pm.test('Response is an object', function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"})\r",
											"\r",
											"pm.test('Data property is an object', function () {\r",
											"    pm.expect(pm.response.json().data).to.be.an('array');\r",
											"})\r",
											"\r",
											"pm.test(\"Data Types Verification for Dynamic Nested Arrays with Existence Check\", function () {\r",
											"    let jsonData = pm.response.json().data;\r",
											"    \r",
											"    function verifyMainObject(obj) {\r",
											"        if ('id' in obj) pm.expect(obj.id).to.be.a('number');\r",
											"        if ('eol_passed' in obj) pm.expect(obj.eol_passed).to.be.oneOf([0, 1]);\r",
											"        if ('eol_date' in obj) pm.expect(obj.eol_date).to.be.a('string');\r",
											"        if ('sw_release_eol' in obj) pm.expect(obj.sw_release_eol).to.be.a('string');\r",
											"        if ('serial_id' in obj) pm.expect(obj.serial_id).to.be.a('string');\r",
											"        if ('unassigned' in obj) pm.expect(obj.unassigned).to.be.oneOf([0, 1]);\r",
											"        if ('config_request' in obj) pm.expect(obj.config_request).to.be.oneOf([0, 1]);\r",
											"        if ('approval' in obj) pm.expect(obj.approval).to.be.oneOf([0, 1]);\r",
											"        if ('created_at' in obj) pm.expect(obj.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"        if ('updated_at' in obj) pm.expect(obj.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/);\r",
											"        if ('bikeId' in obj) pm.expect(obj.bikeId).to.be.a('string');\r",
											"    }\r",
											"    \r",
											"    function verifyNestedObject(obj) {\r",
											"        if ('id' in obj) pm.expect(obj.id).to.be.a('number');\r",
											"        if ('approval_rollout_id' in obj) pm.expect(obj.approval_rollout_id).to.be.a('number');\r",
											"        if ('op_approval_rules_id' in obj) pm.expect(obj.op_approval_rules_id).to.be.a('number');\r",
											"        if ('comparator' in obj) pm.expect(obj.comparator).to.be.a('string');\r",
											"        if ('threshold' in obj) pm.expect(obj.threshold).to.be.within(0, 100);\r",
											"        if ('start_date' in obj) pm.expect(obj.start_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"        if ('stop_date' in obj) pm.expect(obj.stop_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
											"        if ('days' in obj) pm.expect(obj.days).to.be.within(1, 999);\r",
											"        if ('created_at' in obj) pm.expect(obj.created_at).to.be.a('string');\r",
											"        if ('updated_at' in obj) pm.expect(obj.updated_at).to.to.a('string');\r",
											"    }\r",
											"    \r",
											"    jsonData.forEach((item) => {\r",
											"        if (Array.isArray(item)) {\r",
											"            item.forEach((nestedItem) => {\r",
											"                verifyNestedObject(nestedItem);\r",
											"            });\r",
											"        } else {\r",
											"            verifyMainObject(item);\r",
											"        }\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_server}}api/configtool/rollout/approval_rollout_list",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"rollout",
										"approval_rollout_list"
									]
								}
							},
							"response": []
						},
						{
							"name": "rejection add",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "rules[0][id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "rules[0][approval_rollout_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "rules[0][op_rejection_rules_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "rules[0][comparator]",
											"value": "<",
											"type": "text"
										},
										{
											"key": "rules[0][days]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "rules[0][threshold]",
											"value": "95",
											"type": "text"
										},
										{
											"key": "rules[1][approval_rollout_id]",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "rules[1][op_rejection_rules_id]",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "rules[1][comparator]",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "rules[1][days]",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "rules[1][treshold]",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/rollout/approval_rejection_rollout_rules_add",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"rollout",
										"approval_rejection_rollout_rules_add"
									]
								}
							},
							"response": []
						},
						{
							"name": "approval add",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "rules[0][id]",
											"value": "1",
											"description": "approval rollout id",
											"type": "text"
										},
										{
											"key": "rules[0][approval_rollout_id]",
											"value": "1",
											"type": "text"
										},
										{
											"key": "rules[0][op_approval_rules_id]",
											"value": "3",
											"type": "text"
										},
										{
											"key": "rules[0][comparator]",
											"value": "<=",
											"type": "text"
										},
										{
											"key": "rules[0][days]",
											"value": "10",
											"type": "text"
										},
										{
											"key": "rules[0][treshold]",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rules[1][approval_rollout_id]",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "rules[1][op_approval_rules_id]",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "rules[1][comparator]",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "rules[1][treshold]",
											"value": "",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/rollout/approval_rollout_rules_add",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"rollout",
										"approval_rollout_rules_add"
									]
								}
							},
							"response": []
						},
						{
							"name": "approval delete",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "rules[0][id]",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/rollout/approval_rollout_rules_delete",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"rollout",
										"approval_rollout_rules_delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "approval rejection delete",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "rules[0][id]",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/rollout/approval_rejection_rollout_rules_delete",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"rollout",
										"approval_rejection_rollout_rules_delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "swbikequery",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{authorization}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "release_id",
											"value": "",
											"type": "text"
										},
										{
											"key": "type",
											"value": "Approval Rollout",
											"type": "text"
										},
										{
											"key": "value_type",
											"value": "bikes",
											"type": "text"
										},
										{
											"key": "pageitems",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_server}}api/configtool/rollout/swbikequery",
									"host": [
										"{{api_server}}api"
									],
									"path": [
										"configtool",
										"rollout",
										"swbikequery"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "production tool",
			"item": [
				{
					"name": "api/login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "829toCxVj64BMEgkttvod69SQJbPPgJpcaHFwLo2o",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "pAd0RV9mlsLDkpVFjqjHi1ACbDYx0BhS9azJD4nAv",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/login",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "production/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Respose is an object', function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"})\r",
									"\r",
									"pm.test(\"Respose have an unassigned_bikes, releases, configurations, releases arrays\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.have.property('unassigned_bikes').to.be.an('array');\r",
									"    pm.expect(responseJSON).to.have.property('configurations').to.be.an('array');\r",
									"    pm.expect(responseJSON).to.have.property('releases').to.be.an('array');\r",
									"});\r",
									"pm.test(\"All Config request property is null in Unassigned bikes array\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    responseJSON.unassigned_bikes.forEach((items) => {\r",
									"        pm.expect(items.config_request).to.be.null;\r",
									"    });  \r",
									"});\r",
									"pm.test(\"All Component Id, Component Identifier, Labeled Config Id  properties are not null in Unassigned bikes array\", function(){\r",
									"    var responseJSON = pm.response.json();\r",
									"    responseJSON.unassigned_bikes.forEach((items) => {\r",
									"        pm.expect(items.component_id).not.to.be.null;\r",
									"        pm.expect(items.component_identifier).not.to.be.null;\r",
									"        pm.expect(items.component_labeled_config_id).not.to.be.null;\r",
									"    });\r",
									"});\r",
									"pm.test(\"All oe property in configurations list should be 2\", function() {\r",
									"    var responseJSON = pm.response.json();\r",
									"    responseJSON.configurations.forEach((items) => {\r",
									"        pm.expect(items.oe).to.eql(2);\r",
									"    });\r",
									"});\r",
									"pm.test(\"In releases array all release id property should not be null\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    responseJSON.releases.forEach((items) => {\r",
									"        pm.expect(items.release_id).not.to.be.null;\r",
									"        console.log(items.release_id);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_production}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "order",
									"value": "serial",
									"disabled": true
								},
								{
									"key": "direction",
									"value": "asc",
									"type": "text",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "recordPerPage",
									"value": "20",
									"type": "text",
									"disabled": true
								},
								{
									"key": "search[kind]",
									"value": "Core",
									"type": "text",
									"disabled": true
								},
								{
									"key": "search[component_id]",
									"value": "95",
									"type": "text",
									"disabled": true
								},
								{
									"key": "search[OEM_ID]",
									"value": "2",
									"type": "text",
									"disabled": true
								},
								{
									"key": "search[stolen]",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "search[recalled]",
									"value": "0",
									"type": "text",
									"disabled": true
								},
								{
									"key": "search[last_modification]",
									"value": "2020-01-20",
									"type": "text",
									"disabled": true
								},
								{
									"key": "OEM_ID",
									"value": "3",
									"type": "text"
								},
								{
									"key": "component_identifier",
									"value": "16",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/production/list",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"production",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "production/list2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiIzY2FhZDZjYzdhZjdkMTYxOTA2NTE4NGY4NGNmNTY1N2EyNDI4ZWJiZjc5OTc5N2MzOWFhNjkxOWYyYWNlNGFmMzQ2Y2Q2NzU0NDBhZWU5ZCIsImlhdCI6MTY2ODUwMTUwMS4zMzMwODUsIm5iZiI6MTY2ODUwMTUwMS4zMzMwODksImV4cCI6MTcwMDAzNzUwMS4zMjQzMTksInN1YiI6IjIiLCJzY29wZXMiOltdfQ.LUFjHx9pwf-UIMpT1JCwoVHOH23s2gx9HsHdos_UWq-3dEMWs9St90lbpwhqU1XcJqWoDp3-4wyR7imtq3_CfgXa5VvzZr8RBSoPg6aLX3AdNC3xA9Ad7C8GiVa6CYrqXNdt8TWYfC11d4ruuEX5ACf12xPpZcGNJ5dP22JaTJBTnoop3afV9fvQc3VjxENJi5ONage70MMPwbqOQlzpNiIdcltMW7UirIIdRWj3Ad7DekbaSTSTXB1EYf37vlhavLkvQH7-290nBP8shBeu2RrKVzg18s1rHuYdPkMczksFdI6xRY5p0rMR_sIrMAJ5vXAPE3FfUZeEbYsDUESwXOroVE3UmwNedn7ewdWWl5HgvlR40V3ccpuJoNYc3WDw-kYNqOUK8OD_XRrD2noUv4GhOBiMqQFCTumk8aDswKgyOWjnkYF8OMgZS16eyHbLDJ-1T8tI2AijCIjs_09-cPcqnui8CitEkv6y07hKlmUACWAfpm9R4BDsTkOFSipPsYGaujdT-vWQEM25YUHU-HOyu95jIdWC6u49ZiO79txgDopQdhfiamBe3cHRzOXytQQkTIY3S9A_hnKOfdC_SQTtKp5r_D3iJl3PbEDJEZtdo7u_UsMJjhFZ77Jvs5nTAPG35KNQ2qn9eIEDADt4PyknBuqJNCY1jgSq8nUa4Go",
								"description": "dealer token",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiJhZmE4ZDAxNmU3NDRhYmQ5NjEzYmFlNzgzZWM5YjBkYTlhMGRlN2NiODRiNjVjOThhY2IzMjRmNjAxNWUwNTg3MWQ2OWJiMDk3MjA0OTYxOCIsImlhdCI6MTYzOTQwODE4NywibmJmIjoxNjM5NDA4MTg3LCJleHAiOjE2NzA5NDQxODcsInN1YiI6IjIiLCJzY29wZXMiOltdfQ.iibwmbQX6NSXY3nFhyxVPK-oKkWOuUsJ-o98jyAblV29o1JXSehaH8BC6T6R5A_Tb_cFqAScdSsa-nmrj-3QD7X2B2Ald0YuWQayoQXuxIKXofp69Z-EZTN9v6NIbVBQZ1FQn3hLK8g_D1kWPMQEtjGyL0-VG28Sdy9fQDX58yyLtHEyuEm_jx-29Oy5FgY-_ekHIFrnI1kAFLQOOFBg5qSbsJFf8lVC-PPYWbuyQsLZhjLa4OUktPBk944UxV7yJOsiqDoE8BK2kHu_OgX7E72q3fC946-7KNygzEOFAWI87w_6UqQChsApkxzITL-zMRudnIM7MwlyvQ3IO1_FAJXp85zHcCo479_S_srCCq_3YyaoIkypHm1HOc0p3wr2ywGvQsFVZtELC2xu6v90cjbb9F4m7EmQLblEaq0t_BrfcrINWQWl0aSacJ9uIA_QI5q3PxGdSpyldb6uXJ4H9DB-Swje4WIFlP2qhy6FfIpyyXLUAn6bveA01DZmp9FqW72aq5UMidhkZDI-FNfE9bdm_vnMl_5HJOHA2fok8z3fwjgJQNzwacFOmXoD-0JeWw1RYeTmWFw74xREm0-3H2cG4L8WYhv0wskL7uYOCq7q4om_ORlGEafNB3zokcJOEsXyfRhseoxMGIFaGsBnG1G7TIThuvXWnsXCsM1V5sM",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IjJCSE90TTB2R0h0NjR0enB6cGpNVDVXNkVwYS1ULXY4QXZGQU1UeS1pZjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ5MTQ0Njk5LCJuYmYiOjE2NDkxNDQ2OTksImV4cCI6MTY0OTE1MDAwMywiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQUIxNG5SUkF0WnFQSGhqaHZqYVZHOEU5MWpPVGdVM3hSS3pqUW5QcEpDT2VpMXdIamVDUEk0cXdtQTZoQkJicTBWazdQV0tYVFZEa3lNVFJCZnN5ajdRPT0iLCJhbHRzZWNpZCI6IjE6bGl2ZS5jb206MDAwMzQwMDEyRDQ3NTdEQSIsImFtciI6WyJwd2QiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImVtYWlsIjoibWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwiZmFtaWx5X25hbWUiOiJNw6F0w6kiLCJnaXZlbl9uYW1lIjoiVGFrw6FjcyIsImlkcCI6ImxpdmUuY29tIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMjEzLjIyMi4xOTEuMjMzIiwibmFtZSI6IlRha8OhY3MgTcOhdMOpIiwib2lkIjoiMDdkNWVmODktODY2MS00NWM5LWE5M2UtZjdkN2I0ZTc4YTE1IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxRTUxQTM3MTgiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUdrLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic3ViIjoiRXdTUEdxbHR3VGUtc1hsMERzeU5NM0hWQ1ktSVFnMEpqYU1BVnA3Z2NRQSIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJFVSIsInRpZCI6ImQ1MTk5OTA3LTY1ODAtNDY0OC1iYjMxLWRiYTE5YTI3OTU4MyIsInVuaXF1ZV9uYW1lIjoibGl2ZS5jb20jbWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwidXRpIjoiaEk0R29qWDJQa0dIOV9iSUYySTlBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiMTNiZDFjNzItNmY0YS00ZGNmLTk4NWYtMThkM2I4MGYyMDhhIl0sInhtc19zdCI6eyJzdWIiOiJiWGFJSG5BX2pnWG5nVTlwRkpDZTJ2WlB1bW5TcHktWTZoaUhkajZXSGNVIn0sInhtc190Y2R0IjoxNTI4NzI5NzQzfQ.M1hAhr4c6-Ml7yazLd0wGXvKtPXhKnHGpbI6HNRzHexyrasMepz2utT-uZb5vJwcCr0mNMgAUJsAbm8kgRDWQF4RSIKTIEGNRruQYLh-SjDKbNt6MQ0k7ZCl63Y5hKkGyMZpuGoj3Nvg4e_28XbzP4g4hpycos1aqhptEAslLZvAcY3ARIlr_WtqbEidhTkuBvzYlnOoVzao-BOe8L3RDCttHAESoxhFv_AQfI_NV4PtutCSyuIp1ywtEPpLnjsXwR2O6zDEAPOv2JDUaUICmtQldVkWn6syp4PAUgS1ENbltTMo9VzEPpx2xrXc3PwFi8CaalruxSINrW_8Rr9_rg",
								"description": "Taki",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IlctZ2xBYWFSQTlDMW5PLThkWnpzR1dyeXpXVXFqcUlkeVd2Mjh1d1ZpTjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjUwNDU3NDI5LCJuYmYiOjE2NTA0NTc0MjksImV4cCI6MTY1MDQ2MzA4NiwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFaUUFhLzhUQUFBQWlVVmgvRlE4WjA3SGFsaFA3Y1VnMUdpZUpwVitZTGRhcmY2OS84bWFKd0dYQXpGblhaQ1B2eTVmUWdjMWpvU0E0SkdLN1FoRkNORTdoemNWWFUwdTE0OUpjNFp2N1NXbkNrTDZRaXRnanE4YlFPeXJpcDc1NE1rbGdKb011Q1FDaGh3NmpIWlBtaElueFNyMmpaV1ZTKzN0L2lRREpkM0JCMVk0dE5NUTJFRkUzeDMwMHBQMDhweThQNm56MmY0cyIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImZhbWlseV9uYW1lIjoiS2ltcGZsZXIiLCJnaXZlbl9uYW1lIjoiTWFyY28iLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIyMTcuMjQ4LjM3Ljg5IiwibmFtZSI6Ik1hcmNvIEtpbXBmbGVyIiwib2lkIjoiMjUxZTI0ZTItMWE2Yi00NDJjLWIzY2UtZDM2YWU5N2U0OWY2IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDM3RkZFQUVGNUYyOEYiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUVFLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIFVzZXIuUmVhZCBlbWFpbCIsInNpZ25pbl9zdGF0ZSI6WyJrbXNpIl0sInN1YiI6IjlIOWx0TXQxN1RTc241LUJWdHB0LW9VbmtKeHhuYTNSYUE0UzFrQ1ptQjQiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiRVUiLCJ0aWQiOiJkNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMiLCJ1bmlxdWVfbmFtZSI6Im0ua2ltcGZsZXJAemZtaWNyb21vYmlsaXR5LmNvbSIsInVwbiI6Im0ua2ltcGZsZXJAemZtaWNyb21vYmlsaXR5LmNvbSIsInV0aSI6InNGRUVYR1ZNU1VHWGpQMzYxVFFOQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbIjYyZTkwMzk0LTY5ZjUtNDIzNy05MTkwLTAxMjE3NzE0NWUxMCIsImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiMjR3ZGhMUHhmcEZjMklFcklNZURDUEFiUm84TWQ2RjAwdGpMNWlnTjdORSJ9LCJ4bXNfdGNkdCI6MTUyODcyOTc0M30.f68kmbMrLIalrih2bTSqolpp7YLNJ7Oe2anfmHkjQdZrKMBRNe2yAbvKhqS_3BI3l3FZMXSxUN5Q3BAqxyoCZX4MVeqziAG-IXtG76Akq1svBVegocJZvQgkGFr6hAJ3avmzWma3gjFkbCk7OX2S8K9P31TcN92UyuViYdYLU2Gmwnxmy6zfHT_-5JiUz-Kcoqse8yqqvuyhVu7lqzBjTl45QpVIGU2FUCYH3NisU-JBB6pb-KSLcGHh39OazcV6zILYjZxtamcgxj6dvA3PnxSbMYI_aeQJzkCOzI57uns-otgjjZHrSXkZ9fXLWpGhfmwXdNSNX4OKEtY7KjmX_g",
								"description": "Marco",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6ImhXZ2tBU3pUR09JXzNjOWtpQXV2Um4xTm5MRERfRW02Rlhvdjk5WUR5cGMiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ5ODUzMzg5LCJuYmYiOjE2NDk4NTMzODksImV4cCI6MTY0OTg1ODI3MCwiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQXFCc3ArU1pKb2J4RGlKcmt0OExha1dRdTlKcTk2TkZLanlscWZ0TEpoZWxLZ2M0cW9qWDZYbk1pSDVPU1dJWVpYMHJrbm9ZWStVZFd0THNxcmd6Qnh3PT0iLCJhbHRzZWNpZCI6IjU6OjEwMDMyMDAxRUE1MkI1MDIiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkdQU1R1bmVyIENvbmZpZyBUb29sIiwiYXBwaWQiOiIzZWJkYzM2Ny1iMjlhLTRjYjgtYjc2Zi0xYWYzNzVmOTlhM2IiLCJhcHBpZGFjciI6IjAiLCJlbWFpbCI6ImdhYm9yLmVybWVueWlAZ3BzdHVuZXIuY29tIiwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMTgyNWQxMjQtZjhhYS00MjliLTgxZGYtZGQ5Njg3YjUwN2U1LyIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjIxMy4yMjIuMTkxLjIzMyIsIm5hbWUiOiJnYWJvci5lcm1lbnlpIiwib2lkIjoiNmExOWM4MTYtOGM2Ny00ZDdkLTgzZDctZmZkYTMyZTM4Njc0IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxRUE0RDY5MUEiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QVBzLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIFVzZXIuUmVhZCBlbWFpbCIsInN1YiI6IkNaVlBYT1ZTVnVVVnF5R2FraE1iNlVUMVA5aVQ2aG9Kc2c0OVVUREJWdVkiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiRVUiLCJ0aWQiOiJkNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMiLCJ1bmlxdWVfbmFtZSI6ImdhYm9yLmVybWVueWlAZ3BzdHVuZXIuY29tIiwidXRpIjoiNGhOTFd6aGZfMGV1dkcwYllyZFpBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiMTNiZDFjNzItNmY0YS00ZGNmLTk4NWYtMThkM2I4MGYyMDhhIl0sInhtc19zdCI6eyJzdWIiOiJGNXUxeVFiWnI2OF9YQmp4N19DbEN6dU5IbUczRTg2cndTQnduVF8wTldzIn0sInhtc190Y2R0IjoxNTI4NzI5NzQzfQ.R2_qPPjT_yOj7TqbdECN6aYTz6yIhNC9Vluxo5VPQ0UfV-EUYjizQkvqzjcYywaXIrYkJPyj17v2OtFrkE3GaHnj8-tfNtumc5k8Qa0HiJt8oPpF5usNwKLUMXm2hHtOT6xyQcyYyYpWB-dGmKsY3rQnDQmEYRrixdieT1UOAt4rAT4XIhI-gvlY3h-OdQm96Zr0wNEgz53cgI2RLHzzv7UnBVcoMKZN1gzsjfXg0ovfhQcmBcHHlHvgaoPOWEYyl89H6TJN1vVnk0hEZNT43E3aM4IH2xpzHX_GM1twpnIpBY_uC9lZkz7iCZ4X2StuWlaKjY_oSMgSr3bqTwUJGw",
								"description": "Gabi",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6ImRTam5FWWVEM2tqazhLZkVnZjhHVnNwLWRhWGhXM09HQzYzdGVtUE5MNWciLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ4NjI5NzM0LCJuYmYiOjE2NDg2Mjk3MzQsImV4cCI6MTY0ODYzNTE1MywiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQVRBb21OWW9Ubm5nSmtFdlVtZ1lMZ0VQRkhyL2FCNkdMcGJIa3k2bDJ0NjNneml0KytsTXZOUnpHUk1WdGhYUE1QME5UVXlvM1psNzQxR1ZvakRieDZRPT0iLCJhbHRzZWNpZCI6IjU6OjEwMDMyMDAxRTI1MzAzRDUiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkdQU1R1bmVyIENvbmZpZyBUb29sIiwiYXBwaWQiOiIzZWJkYzM2Ny1iMjlhLTRjYjgtYjc2Zi0xYWYzNzVmOTlhM2IiLCJhcHBpZGFjciI6IjAiLCJlbWFpbCI6ImJvdG9uZC5iaWxpYm9rQGdwc3R1bmVyLmNvbSIsImlkcCI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzE4MjVkMTI0LWY4YWEtNDI5Yi04MWRmLWRkOTY4N2I1MDdlNS8iLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIyMTMuMjIyLjE5MS4yMzMiLCJuYW1lIjoiYm90b25kLmJpbGlib2siLCJvaWQiOiIyYTA3YTNjOC1kNWQ2LTRkMDMtYTgzMC0zOWEyNTgxNzMzM2QiLCJwbGF0ZiI6IjMiLCJwdWlkIjoiMTAwMzIwMDFFMjUyRUU1MCIsInJoIjoiMC5BVEFBQjVrWjFZQmxTRWE3TWR1aG1pZVZnd01BQUFBQUFBQUF3QUFBQUFBQUFBQXdBR2suIiwic2NwIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJzaWduaW5fc3RhdGUiOlsia21zaSJdLCJzdWIiOiJabmFEaU9GajMtRndkUTdobUNoMzVrWlVTejBwQUJFWUgyN2VKa0k1X3FFIiwidGVuYW50X3JlZ2lvbl9zY29wZSI6IkVVIiwidGlkIjoiZDUxOTk5MDctNjU4MC00NjQ4LWJiMzEtZGJhMTlhMjc5NTgzIiwidW5pcXVlX25hbWUiOiJib3RvbmQuYmlsaWJva0BncHN0dW5lci5jb20iLCJ1dGkiOiJEVjFjVHBkeGlFMngwOE85N2FRSkFBIiwidmVyIjoiMS4wIiwid2lkcyI6WyIxM2JkMWM3Mi02ZjRhLTRkY2YtOTg1Zi0xOGQzYjgwZjIwOGEiXSwieG1zX3N0Ijp7InN1YiI6IjlTemdrZjN6U2hrak02WTBvQXpQZC0tUzhfRnFFYnlMakZkekVwcUZzaDAifSwieG1zX3RjZHQiOjE1Mjg3Mjk3NDN9.VSjC_cktrkVkVbahc61B7oT6Gfi4qcafzWK6nhEt9otAziZmWSTS1kbTj68lxkyn0cXi5JElvgb3rUyGVTq7ifz1VazHyQsNncdldZnkUc4nZRZbWPn339K7Ev7UYMNqVcNF0OCXqcw28-G6fiwSaQPLoxG0RTdFPgQcY9WZdfjEgakwEsPULx5Fg_7yY7ddRQfHoflx0627q49xZiyMlO27JJanRRtEeziQCU8kaIcdiMwKSdDXcO7nI6E73vaSXZvtFOqU9zy7ViJgia1N24QkCADbpwUOfP3Uop8Pf5PwvY1mmaAScMjDhZGreng4wYr6m-uv2h2ouMTP26pHGw",
								"description": "Boti",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiJkOTJlMzAyYWZjOWEyNjk2M2M4MmIxOGZlYjdhZGNlMTAzNjIyYzYzYWI3ODBiZDY0MzA4NDEzZGZmNDlmYmVjMTAyZWExNzhmYmZmOWY0MSIsImlhdCI6MTY1MTA3MDk5NC4zNTQ5MzEsIm5iZiI6MTY1MTA3MDk5NC4zNTQ5MzYsImV4cCI6MTY4MjYwNjk5NC4zNDc3ODMsInN1YiI6IjIiLCJzY29wZXMiOltdfQ.vPzhl4krHrX0-XyGBrNHHuJwnmwFgdtglY_XKvCYcRaL15Kgeqq4ihtlQMzkBybQybRGC_WF5IpfVM_hZV77RzbT7AHkO9LdyxOKdp2UFMoxtXsqsEQj-m1F_uzWZzMyQ_WGlk3esPQvJD6jH3soQj66FCr4gBHmfcz5dGrhqjFyds87Q9vw-aPVVjUDdkOtFXM5ripeyFRV-mkj2An6HE6Ud0uPEhuMHUBqUjKeYcI2j99667I08IZvxjTvh_okdZdHnPh8l3Pu_2fma3w66haMEBXVpGKiXT-H3rA1NGkHDeghOXxhBSftoRCHRJHwF9GUIAyDFtWYudVogfLI1R7ROYsb7I1H8VCJ9kZDFmSNda-X7tiS82u_YpjPn-RtblNB-CZo_aeTzgCtu738DyIjAaF-sJvDhe1T0Ip1qFXYhScXKVcHR6cNKAW-03xeX50zaaDFF3GS_D99WogNBvI5d2N9EFvyBrjlS-X8duMFF2T0D0dvNl8OVFytmRBd-Lftcm-6fTGR6_FGTI4YnOCv_TF0HLixK2iZLYDQVRnAdLZ1GmBa25of-yW6Q5IYDmUv6vFl27D39SOx9lbd8fHyVdl1_y_3daEfugtJic9j53Hljl-8SArcWzzyL4W3ABgRyxcgyihAPXz4jXGSAxtpGYCXADSGs8Mm5XFPf4s",
								"description": "Production tool",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer test",
								"description": "failed",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "last_request",
									"value": "2021-12-14T13:00:57Z",
									"disabled": true
								},
								{
									"key": "last_request",
									"value": "2022-04-25T14:37:31Z",
									"type": "text"
								},
								{
									"key": "token",
									"value": "1",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/production/list2",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"production",
								"list2"
							]
						}
					},
					"response": []
				},
				{
					"name": "production/bike_registry",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_production}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"date\": \"2024-06-21\",\r\n        \"time\": \"16:38:56\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.13.1\",\r\n        \"bikeId\": \"testbikeactiveroll\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 6,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"1000\",\r\n                \"serial\": \"testserialAurixgreg\",\r\n                \"firmwareVersion\": \"10.0.1\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"1001\",\r\n                \"serial\": \"testserialBLEgreg\",\r\n                \"firmwareVersion\": \"4.0.7\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"3000\",\r\n                \"serial\": \"testserialSI348greg\",\r\n                \"firmwareVersion\": \"1.4.1\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"2000\",\r\n                \"serial\": \"testserialCentrix75greg\",\r\n                \"firmwareVersion\": \"3.2.4\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n      \r\n        ]\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_server}}api/production/bike_registry",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"production",
								"bike_registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "production/add_components",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiJhZmE4ZDAxNmU3NDRhYmQ5NjEzYmFlNzgzZWM5YjBkYTlhMGRlN2NiODRiNjVjOThhY2IzMjRmNjAxNWUwNTg3MWQ2OWJiMDk3MjA0OTYxOCIsImlhdCI6MTYzOTQwODE4NywibmJmIjoxNjM5NDA4MTg3LCJleHAiOjE2NzA5NDQxODcsInN1YiI6IjIiLCJzY29wZXMiOltdfQ.iibwmbQX6NSXY3nFhyxVPK-oKkWOuUsJ-o98jyAblV29o1JXSehaH8BC6T6R5A_Tb_cFqAScdSsa-nmrj-3QD7X2B2Ald0YuWQayoQXuxIKXofp69Z-EZTN9v6NIbVBQZ1FQn3hLK8g_D1kWPMQEtjGyL0-VG28Sdy9fQDX58yyLtHEyuEm_jx-29Oy5FgY-_ekHIFrnI1kAFLQOOFBg5qSbsJFf8lVC-PPYWbuyQsLZhjLa4OUktPBk944UxV7yJOsiqDoE8BK2kHu_OgX7E72q3fC946-7KNygzEOFAWI87w_6UqQChsApkxzITL-zMRudnIM7MwlyvQ3IO1_FAJXp85zHcCo479_S_srCCq_3YyaoIkypHm1HOc0p3wr2ywGvQsFVZtELC2xu6v90cjbb9F4m7EmQLblEaq0t_BrfcrINWQWl0aSacJ9uIA_QI5q3PxGdSpyldb6uXJ4H9DB-Swje4WIFlP2qhy6FfIpyyXLUAn6bveA01DZmp9FqW72aq5UMidhkZDI-FNfE9bdm_vnMl_5HJOHA2fok8z3fwjgJQNzwacFOmXoD-0JeWw1RYeTmWFw74xREm0-3H2cG4L8WYhv0wskL7uYOCq7q4om_ORlGEafNB3zokcJOEsXyfRhseoxMGIFaGsBnG1G7TIThuvXWnsXCsM1V5sM",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IjJCSE90TTB2R0h0NjR0enB6cGpNVDVXNkVwYS1ULXY4QXZGQU1UeS1pZjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ5MTQ0Njk5LCJuYmYiOjE2NDkxNDQ2OTksImV4cCI6MTY0OTE1MDAwMywiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQUIxNG5SUkF0WnFQSGhqaHZqYVZHOEU5MWpPVGdVM3hSS3pqUW5QcEpDT2VpMXdIamVDUEk0cXdtQTZoQkJicTBWazdQV0tYVFZEa3lNVFJCZnN5ajdRPT0iLCJhbHRzZWNpZCI6IjE6bGl2ZS5jb206MDAwMzQwMDEyRDQ3NTdEQSIsImFtciI6WyJwd2QiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImVtYWlsIjoibWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwiZmFtaWx5X25hbWUiOiJNw6F0w6kiLCJnaXZlbl9uYW1lIjoiVGFrw6FjcyIsImlkcCI6ImxpdmUuY29tIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMjEzLjIyMi4xOTEuMjMzIiwibmFtZSI6IlRha8OhY3MgTcOhdMOpIiwib2lkIjoiMDdkNWVmODktODY2MS00NWM5LWE5M2UtZjdkN2I0ZTc4YTE1IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxRTUxQTM3MTgiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUdrLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic3ViIjoiRXdTUEdxbHR3VGUtc1hsMERzeU5NM0hWQ1ktSVFnMEpqYU1BVnA3Z2NRQSIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJFVSIsInRpZCI6ImQ1MTk5OTA3LTY1ODAtNDY0OC1iYjMxLWRiYTE5YTI3OTU4MyIsInVuaXF1ZV9uYW1lIjoibGl2ZS5jb20jbWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwidXRpIjoiaEk0R29qWDJQa0dIOV9iSUYySTlBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiMTNiZDFjNzItNmY0YS00ZGNmLTk4NWYtMThkM2I4MGYyMDhhIl0sInhtc19zdCI6eyJzdWIiOiJiWGFJSG5BX2pnWG5nVTlwRkpDZTJ2WlB1bW5TcHktWTZoaUhkajZXSGNVIn0sInhtc190Y2R0IjoxNTI4NzI5NzQzfQ.M1hAhr4c6-Ml7yazLd0wGXvKtPXhKnHGpbI6HNRzHexyrasMepz2utT-uZb5vJwcCr0mNMgAUJsAbm8kgRDWQF4RSIKTIEGNRruQYLh-SjDKbNt6MQ0k7ZCl63Y5hKkGyMZpuGoj3Nvg4e_28XbzP4g4hpycos1aqhptEAslLZvAcY3ARIlr_WtqbEidhTkuBvzYlnOoVzao-BOe8L3RDCttHAESoxhFv_AQfI_NV4PtutCSyuIp1ywtEPpLnjsXwR2O6zDEAPOv2JDUaUICmtQldVkWn6syp4PAUgS1ENbltTMo9VzEPpx2xrXc3PwFi8CaalruxSINrW_8Rr9_rg",
								"description": "Taki",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IlctZ2xBYWFSQTlDMW5PLThkWnpzR1dyeXpXVXFqcUlkeVd2Mjh1d1ZpTjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjUwNDU3NDI5LCJuYmYiOjE2NTA0NTc0MjksImV4cCI6MTY1MDQ2MzA4NiwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFaUUFhLzhUQUFBQWlVVmgvRlE4WjA3SGFsaFA3Y1VnMUdpZUpwVitZTGRhcmY2OS84bWFKd0dYQXpGblhaQ1B2eTVmUWdjMWpvU0E0SkdLN1FoRkNORTdoemNWWFUwdTE0OUpjNFp2N1NXbkNrTDZRaXRnanE4YlFPeXJpcDc1NE1rbGdKb011Q1FDaGh3NmpIWlBtaElueFNyMmpaV1ZTKzN0L2lRREpkM0JCMVk0dE5NUTJFRkUzeDMwMHBQMDhweThQNm56MmY0cyIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImZhbWlseV9uYW1lIjoiS2ltcGZsZXIiLCJnaXZlbl9uYW1lIjoiTWFyY28iLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIyMTcuMjQ4LjM3Ljg5IiwibmFtZSI6Ik1hcmNvIEtpbXBmbGVyIiwib2lkIjoiMjUxZTI0ZTItMWE2Yi00NDJjLWIzY2UtZDM2YWU5N2U0OWY2IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDM3RkZFQUVGNUYyOEYiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUVFLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIFVzZXIuUmVhZCBlbWFpbCIsInNpZ25pbl9zdGF0ZSI6WyJrbXNpIl0sInN1YiI6IjlIOWx0TXQxN1RTc241LUJWdHB0LW9VbmtKeHhuYTNSYUE0UzFrQ1ptQjQiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiRVUiLCJ0aWQiOiJkNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMiLCJ1bmlxdWVfbmFtZSI6Im0ua2ltcGZsZXJAemZtaWNyb21vYmlsaXR5LmNvbSIsInVwbiI6Im0ua2ltcGZsZXJAemZtaWNyb21vYmlsaXR5LmNvbSIsInV0aSI6InNGRUVYR1ZNU1VHWGpQMzYxVFFOQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbIjYyZTkwMzk0LTY5ZjUtNDIzNy05MTkwLTAxMjE3NzE0NWUxMCIsImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiMjR3ZGhMUHhmcEZjMklFcklNZURDUEFiUm84TWQ2RjAwdGpMNWlnTjdORSJ9LCJ4bXNfdGNkdCI6MTUyODcyOTc0M30.f68kmbMrLIalrih2bTSqolpp7YLNJ7Oe2anfmHkjQdZrKMBRNe2yAbvKhqS_3BI3l3FZMXSxUN5Q3BAqxyoCZX4MVeqziAG-IXtG76Akq1svBVegocJZvQgkGFr6hAJ3avmzWma3gjFkbCk7OX2S8K9P31TcN92UyuViYdYLU2Gmwnxmy6zfHT_-5JiUz-Kcoqse8yqqvuyhVu7lqzBjTl45QpVIGU2FUCYH3NisU-JBB6pb-KSLcGHh39OazcV6zILYjZxtamcgxj6dvA3PnxSbMYI_aeQJzkCOzI57uns-otgjjZHrSXkZ9fXLWpGhfmwXdNSNX4OKEtY7KjmX_g",
								"description": "Marco",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6ImhXZ2tBU3pUR09JXzNjOWtpQXV2Um4xTm5MRERfRW02Rlhvdjk5WUR5cGMiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ5ODUzMzg5LCJuYmYiOjE2NDk4NTMzODksImV4cCI6MTY0OTg1ODI3MCwiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQXFCc3ArU1pKb2J4RGlKcmt0OExha1dRdTlKcTk2TkZLanlscWZ0TEpoZWxLZ2M0cW9qWDZYbk1pSDVPU1dJWVpYMHJrbm9ZWStVZFd0THNxcmd6Qnh3PT0iLCJhbHRzZWNpZCI6IjU6OjEwMDMyMDAxRUE1MkI1MDIiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkdQU1R1bmVyIENvbmZpZyBUb29sIiwiYXBwaWQiOiIzZWJkYzM2Ny1iMjlhLTRjYjgtYjc2Zi0xYWYzNzVmOTlhM2IiLCJhcHBpZGFjciI6IjAiLCJlbWFpbCI6ImdhYm9yLmVybWVueWlAZ3BzdHVuZXIuY29tIiwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMTgyNWQxMjQtZjhhYS00MjliLTgxZGYtZGQ5Njg3YjUwN2U1LyIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjIxMy4yMjIuMTkxLjIzMyIsIm5hbWUiOiJnYWJvci5lcm1lbnlpIiwib2lkIjoiNmExOWM4MTYtOGM2Ny00ZDdkLTgzZDctZmZkYTMyZTM4Njc0IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxRUE0RDY5MUEiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QVBzLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIFVzZXIuUmVhZCBlbWFpbCIsInN1YiI6IkNaVlBYT1ZTVnVVVnF5R2FraE1iNlVUMVA5aVQ2aG9Kc2c0OVVUREJWdVkiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiRVUiLCJ0aWQiOiJkNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMiLCJ1bmlxdWVfbmFtZSI6ImdhYm9yLmVybWVueWlAZ3BzdHVuZXIuY29tIiwidXRpIjoiNGhOTFd6aGZfMGV1dkcwYllyZFpBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiMTNiZDFjNzItNmY0YS00ZGNmLTk4NWYtMThkM2I4MGYyMDhhIl0sInhtc19zdCI6eyJzdWIiOiJGNXUxeVFiWnI2OF9YQmp4N19DbEN6dU5IbUczRTg2cndTQnduVF8wTldzIn0sInhtc190Y2R0IjoxNTI4NzI5NzQzfQ.R2_qPPjT_yOj7TqbdECN6aYTz6yIhNC9Vluxo5VPQ0UfV-EUYjizQkvqzjcYywaXIrYkJPyj17v2OtFrkE3GaHnj8-tfNtumc5k8Qa0HiJt8oPpF5usNwKLUMXm2hHtOT6xyQcyYyYpWB-dGmKsY3rQnDQmEYRrixdieT1UOAt4rAT4XIhI-gvlY3h-OdQm96Zr0wNEgz53cgI2RLHzzv7UnBVcoMKZN1gzsjfXg0ovfhQcmBcHHlHvgaoPOWEYyl89H6TJN1vVnk0hEZNT43E3aM4IH2xpzHX_GM1twpnIpBY_uC9lZkz7iCZ4X2StuWlaKjY_oSMgSr3bqTwUJGw",
								"description": "Gabi",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6ImRTam5FWWVEM2tqazhLZkVnZjhHVnNwLWRhWGhXM09HQzYzdGVtUE5MNWciLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ4NjI5NzM0LCJuYmYiOjE2NDg2Mjk3MzQsImV4cCI6MTY0ODYzNTE1MywiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQVRBb21OWW9Ubm5nSmtFdlVtZ1lMZ0VQRkhyL2FCNkdMcGJIa3k2bDJ0NjNneml0KytsTXZOUnpHUk1WdGhYUE1QME5UVXlvM1psNzQxR1ZvakRieDZRPT0iLCJhbHRzZWNpZCI6IjU6OjEwMDMyMDAxRTI1MzAzRDUiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkdQU1R1bmVyIENvbmZpZyBUb29sIiwiYXBwaWQiOiIzZWJkYzM2Ny1iMjlhLTRjYjgtYjc2Zi0xYWYzNzVmOTlhM2IiLCJhcHBpZGFjciI6IjAiLCJlbWFpbCI6ImJvdG9uZC5iaWxpYm9rQGdwc3R1bmVyLmNvbSIsImlkcCI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzE4MjVkMTI0LWY4YWEtNDI5Yi04MWRmLWRkOTY4N2I1MDdlNS8iLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIyMTMuMjIyLjE5MS4yMzMiLCJuYW1lIjoiYm90b25kLmJpbGlib2siLCJvaWQiOiIyYTA3YTNjOC1kNWQ2LTRkMDMtYTgzMC0zOWEyNTgxNzMzM2QiLCJwbGF0ZiI6IjMiLCJwdWlkIjoiMTAwMzIwMDFFMjUyRUU1MCIsInJoIjoiMC5BVEFBQjVrWjFZQmxTRWE3TWR1aG1pZVZnd01BQUFBQUFBQUF3QUFBQUFBQUFBQXdBR2suIiwic2NwIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJzaWduaW5fc3RhdGUiOlsia21zaSJdLCJzdWIiOiJabmFEaU9GajMtRndkUTdobUNoMzVrWlVTejBwQUJFWUgyN2VKa0k1X3FFIiwidGVuYW50X3JlZ2lvbl9zY29wZSI6IkVVIiwidGlkIjoiZDUxOTk5MDctNjU4MC00NjQ4LWJiMzEtZGJhMTlhMjc5NTgzIiwidW5pcXVlX25hbWUiOiJib3RvbmQuYmlsaWJva0BncHN0dW5lci5jb20iLCJ1dGkiOiJEVjFjVHBkeGlFMngwOE85N2FRSkFBIiwidmVyIjoiMS4wIiwid2lkcyI6WyIxM2JkMWM3Mi02ZjRhLTRkY2YtOTg1Zi0xOGQzYjgwZjIwOGEiXSwieG1zX3N0Ijp7InN1YiI6IjlTemdrZjN6U2hrak02WTBvQXpQZC0tUzhfRnFFYnlMakZkekVwcUZzaDAifSwieG1zX3RjZHQiOjE1Mjg3Mjk3NDN9.VSjC_cktrkVkVbahc61B7oT6Gfi4qcafzWK6nhEt9otAziZmWSTS1kbTj68lxkyn0cXi5JElvgb3rUyGVTq7ifz1VazHyQsNncdldZnkUc4nZRZbWPn339K7Ev7UYMNqVcNF0OCXqcw28-G6fiwSaQPLoxG0RTdFPgQcY9WZdfjEgakwEsPULx5Fg_7yY7ddRQfHoflx0627q49xZiyMlO27JJanRRtEeziQCU8kaIcdiMwKSdDXcO7nI6E73vaSXZvtFOqU9zy7ViJgia1N24QkCADbpwUOfP3Uop8Pf5PwvY1mmaAScMjDhZGreng4wYr6m-uv2h2ouMTP26pHGw",
								"description": "Boti",
								"type": "text",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "last_request",
									"value": "2021-12-14T13:00:57Z",
									"disabled": true
								},
								{
									"key": "last_request",
									"value": "2021-12-15 07:00:51",
									"type": "text",
									"disabled": true
								},
								{
									"key": "token",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "bike_id",
									"value": "test",
									"type": "text"
								},
								{
									"key": "components[0][component_id]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "components[0][component_serial]",
									"value": "test1",
									"type": "text"
								},
								{
									"key": "components[1][component_id]",
									"value": "4",
									"type": "text"
								},
								{
									"key": "components[1][component_serial]",
									"value": "test2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/production/add_components",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"production",
								"add_components"
							]
						}
					},
					"response": []
				},
				{
					"name": "production/bike_registry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body should not be empty\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.not.eql({}); //meaning response body should not be an empty object\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"'success' property is true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_production}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"date\": \"2024-04-25\",\r\n        \"time\": \"12:00:00\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.0.0\",\r\n        \"bikeId\": \"testbikeid1\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 1,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"10\",\r\n                \"serial\": \"testserial1\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"11\",\r\n                \"serial\": \"testserial2\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"31\",\r\n                \"serial\": \"testserial3\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"21\",\r\n                \"serial\": \"testserial4\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"50\",\r\n                \"serial\": \"testserial5\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"40\",\r\n                \"serial\": \"testserial6\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-04-25\",\r\n        \"time\": \"12:00:00\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.0.0\",\r\n        \"bikeId\": \"testbikeid2\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 2,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"10\",\r\n                \"serial\": \"testserial7\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"11\",\r\n                \"serial\": \"testserial8\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"30\",\r\n                \"serial\": \"testserial9\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"20\",\r\n                \"serial\": \"testserial10\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-04-25\",\r\n        \"time\": \"12:00:00\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.0.0\",\r\n        \"bikeId\": \"testbikeid3\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 3,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"10\",\r\n                \"serial\": \"testserial11\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"11\",\r\n                \"serial\": \"testserial12\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"32\",\r\n                \"serial\": \"testserial13\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"20\",\r\n                \"serial\": \"testserial14\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"50\",\r\n                \"serial\": \"testserial15\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-04-25\",\r\n        \"time\": \"12:00:00\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.0.0\",\r\n        \"bikeId\": \"testbikeid4\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 4,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"10\",\r\n                \"serial\": \"testserial16\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"11\",\r\n                \"serial\": \"testserial17\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"31\",\r\n                \"serial\": \"testserial18\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"21\",\r\n                \"serial\": \"testserial19\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"40\",\r\n                \"serial\": \"testserial20\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-04-25\",\r\n        \"time\": \"12:00:00\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.0.0\",\r\n        \"bikeId\": \"testbikeid5\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 5,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"10\",\r\n                \"serial\": \"testserial21\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"11\",\r\n                \"serial\": \"testserial22\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"32\",\r\n                \"serial\": \"testserial23\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"21\",\r\n                \"serial\": \"testserial24\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"50\",\r\n                \"serial\": \"testserial25\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"40\",\r\n                \"serial\": \"testserial26\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-04-25\",\r\n        \"time\": \"12:00:00\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.0.0\",\r\n        \"bikeId\": \"testbikeid6\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 6,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"10\",\r\n                \"serial\": \"testserial27\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"11\",\r\n                \"serial\": \"testserial28\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"31\",\r\n                \"serial\": \"testserial29\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"20\",\r\n                \"serial\": \"testserial30\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-04-25\",\r\n        \"time\": \"12:00:00\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.0.0\",\r\n        \"bikeId\": \"testbikeid7\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 7,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"10\",\r\n                \"serial\": \"testserial31\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"11\",\r\n                \"serial\": \"testserial32\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"31\",\r\n                \"serial\": \"testserial33\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"20\",\r\n                \"serial\": \"testserial34\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"40\",\r\n                \"serial\": \"testserial35\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-04-25\",\r\n        \"time\": \"12:00:00\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.0.0\",\r\n        \"bikeId\": \"testbikeid7a\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 7,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"10\",\r\n                \"serial\": \"testserial36\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"11\",\r\n                \"serial\": \"testserial37\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"31\",\r\n                \"serial\": \"testserial38\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"20\",\r\n                \"serial\": \"testserial39\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"40\",\r\n                \"serial\": \"testserial40\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-04-25\",\r\n        \"time\": \"12:00:00\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.0.0\",\r\n        \"bikeId\": \"testbikeid8\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 8,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"10\",\r\n                \"serial\": \"testserial41\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"11\",\r\n                \"serial\": \"testserial42\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"30\",\r\n                \"serial\": \"testserial43\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"21\",\r\n                \"serial\": \"testserial44\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"40\",\r\n                \"serial\": \"testserial45\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"date\": \"2024-04-25\",\r\n        \"time\": \"12:00:00\",\r\n        \"workerID\": \"12345678\",\r\n        \"EOLVersion\": \"1.0.0\",\r\n        \"bikeId\": \"testbikeid9\",\r\n        \"configSource\": \"scan\",\r\n        \"configId\": 9,\r\n        \"components\": [\r\n            {\r\n                \"componentId\": \"10\",\r\n                \"serial\": \"testserial46\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"11\",\r\n                \"serial\": \"testserial47\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"31\",\r\n                \"serial\": \"testserial48\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"20\",\r\n                \"serial\": \"testserial49\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"50\",\r\n                \"serial\": \"testserial50\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            },\r\n            {\r\n                \"componentId\": \"40\",\r\n                \"serial\": \"testserial51\",\r\n                \"firmwareVersion\": \"1.0.0\",\r\n                \"hardwareVersion\": \"1.0.0\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_server}}api/production/bike_registry",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"production",
								"bike_registry"
							]
						}
					},
					"response": []
				},
				{
					"name": "production/unknown_config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Success property true\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('success', true);\r",
									"});\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_production}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"bikeId\": \"8FFAAFF1\", //this is the serialid\r\n    \"unassigned\": \"1\",\r\n    \"labeledConfigId\": \"124124124\"\r\n  }\r\n  /*{\r\n    \"bikeId\": \"gregbiketesting2\", //this is the serialid\r\n    \"unassigned\": \"1\",\r\n    \"labeledConfigId\": \"123123123\"\r\n  }*/\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_server}}api/production/unknown_config",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"production",
								"unknown_config"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "dealer tool",
			"item": [
				{
					"name": "api/login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api_server}}api/login?client_id=niz0TVC8A1zbXtfDi0lP2pxZZtdtpT9gqwrkDMpSE&client_secret=bbzzIkyq20Ez6FuLKurw17e1XMYQMxXt2Qk0Lof97",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "client_id",
									"value": "niz0TVC8A1zbXtfDi0lP2pxZZtdtpT9gqwrkDMpSE"
								},
								{
									"key": "client_secret",
									"value": "bbzzIkyq20Ez6FuLKurw17e1XMYQMxXt2Qk0Lof97"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "connectionkey/originalkey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"'succes' property is true\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.have.property(\"success\", true);\r",
									"    pm.expect(responseJSON).to.have.property(\"connection_key\");\r",
									"});\r",
									"pm.test(\"Response have a 'connection_key' property\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.have.property(\"connection_key\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_dealer}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bike_id",
									"value": "8",
									"type": "text"
								},
								{
									"key": "connection_key",
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/connectionkey/originalkey",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"connectionkey",
								"originalkey"
							]
						}
					},
					"response": []
				},
				{
					"name": "connectionkey/regenerate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response have a 'success' and a 'connection_key' property\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.have.property(\"success\", true);\r",
									"    pm.expect(responseJSON).to.have.property(\"connection_key\");\r",
									"});\r",
									"pm.test(\"Connection_key response value\", function(){\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    pm.collectionVariables.set(\"connection_key\", jsonData.connection_key);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_dealer}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bike_id",
									"value": "8",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/connectionkey/regenerate",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"connectionkey",
								"regenerate"
							]
						}
					},
					"response": []
				},
				{
					"name": "connectionkey/store",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_dealer}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bike_id",
									"value": "8",
									"type": "text"
								},
								{
									"key": "connection_key",
									"value": "{{connection_key}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/connectionkey/store",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"connectionkey",
								"store"
							]
						}
					},
					"response": []
				},
				{
					"name": "connectionkey/read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response object has a 'success' and a 'connection_key' property\", function () {\r",
									"    const responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.have.property(\"success\", true);\r",
									"    pm.expect(responseJSON).to.have.property(\"connection_key\");\r",
									"});\r",
									"pm.test(\"Connection key property contains 32 characters\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON.connection_key).to.have.lengthOf(32);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_dealer}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bike_id",
									"value": "8",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/connectionkey/read",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"connectionkey",
								"read"
							]
						}
					},
					"response": []
				},
				{
					"name": "connectionkey/listvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Response is an object', function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"})\r",
									"\r",
									"pm.test('\\'validated\\' property should have a string data type', function () {\r",
									"    var responseJSON = pm.response.json().data;\r",
									"    responseJSON.forEach(item => {\r",
									"        pm.expect(item.validated).to.be.a('string');\r",
									"    });\r",
									"})\r",
									"\r",
									"pm.test('Only valid bikes are listed', function () {\r",
									"    var responseJSONData = pm.response.json().data;\r",
									"    pm.expect(responseJSONData.bikeId).not.eql('8');\r",
									"    pm.expect(responseJSONData.bikeId).not.eql('8DFD4FA4');\r",
									"})\r",
									"\r",
									"pm.test('There is no invalid bike in the response', function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    const dataLength = responseBody.data.length;\r",
									"    pm.expect(dataLength).to.be.eql(2);\r",
									"})\r",
									"\r",
									"pm.test(\"Response contains valid connection_key\", function () {\r",
									"    var responseJSONData = pm.response.json().data;\r",
									"    const connection_key = pm.collectionVariables.get(\"connection_key\");\r",
									"    responseJSONData.forEach((item) => {\r",
									"        while(!item.connection_key === connection_key){\r",
									"            break;\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_dealer}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api_server}}api/dealer/connectionkey/listvalid",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"connectionkey",
								"listvalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "connectionkey/listwaitforvalidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    var responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an(\"object\");\r",
									"});\r",
									"pm.test(\"Response have a 'success' poperty that is true\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.have.property(\"success\", true);\r",
									"});\r",
									"pm.test(\"Response have a data property\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.have.property(\"data\").to.be.an(\"array\");\r",
									"});\r",
									"pm.test(\"Value of 'validated' property is null\", function () {\r",
									"    var responseJsonData = pm.response.json().data;\r",
									"    responseJsonData.forEach((item) => {\r",
									"        pm.expect(item).to.have.property(\"validated\").to.be.equal(null);\r",
									"    });\r",
									"});\r",
									"pm.test(\"Response JSON should not contain validated bike\", function (){\r",
									"    var responseJSONData = pm.response.json().data;\r",
									"    pm.expect(responseJSONData.bikeId).not.eql(\"8\");\r",
									"    pm.expect(responseJSONData.bikeId).not.eql(\"8DFD4FA4\");\r",
									"});\r",
									"pm.test(\"All connection key is null\", function(){\r",
									"   const responseBody = pm.response.json();\r",
									"    responseBody.data.forEach(function(item) {\r",
									"       pm.test(`Connection key is null for item with id ${item.id}`, function() {\r",
									"            pm.expect(item.connection_key).to.be.null;\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_dealer}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api_server}}api/dealer/connectionkey/listwaitforvalidation",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"connectionkey",
								"listwaitforvalidation"
							]
						}
					},
					"response": []
				},
				{
					"name": "component/swap",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiI3NGNjZjlmYWI0MTliNjdiYmEwNmFjZTZmMzU2Nzk0ZTM2ZTJkNDNlNjA2YjBhNzdhYjcyMDE0MTE4NWYxYWM3Yzc0MTJlOTRlMWNlZWQ1MCIsImlhdCI6MTYzOTQxMDU1MywibmJmIjoxNjM5NDEwNTUzLCJleHAiOjE2NzA5NDY1NTMsInN1YiI6IjMiLCJzY29wZXMiOltdfQ.PAfznb5g28KaQw5bycwIoREC7zSnGI5QehcxKIYRKHq20awEOopprOZQwWc_n6qBoGFElBnYo0HQ6bRrxwdVcIeP4-FyAqBT5XaGiAM7Qf7mChDD-t8yXLmPCvFzgNrV1_G90pFyb_Wep-5aS-X94vm5FBcS4rvUxYs-F0OYNiXbdi18JLvolYApfnQX5YCgme_eD13jqupofN3EVvFMulJ34ouKCAmPfcUP8bdZdjmPJe77EYUJYOnhq1adx2K3VPSY7JBzKxMw-Q2feSVuF5kjitSZWXkxZX5Gx8U2Q5H95RG-S8e7sTThUE5DdQLaWNqyR2kBWTo5EeEV-v-YlKHdYKfz3zk5A71bzaVa5yZW2gpaHg0bdHeKTDRPjxMy0Uihs5tG8AUD9XOmxRorteE510SbiYL4cZ6orWsCV7vyUluYbk27TbKwsXGoOrEEDoF4bXAefHGAZJb_2_zeAVsTaOvyfcSo_AvIkgB4PtI8wgdrrVUT2G_h5Zj1X7hhILwTrXYKoMTOGka1Gyv5ZVXifXrMSAQDeQ2TJBktvSP3YwrvXI9nte2gjSSiSMdbS7GTXrvJwwrbKxaU91DqrTxoN7Hsz-2czxgUXY1OSDic1hbz6A6gF1S824_-Fvw9Yr1_uQOJUeWbN_l-FCERImM8irN5g82VOyi3-tNjcW0",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "{{authorization_dealer}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "16",
									"type": "text",
									"disabled": true
								},
								{
									"key": "component_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "old_serial_number",
									"value": "test1",
									"type": "text"
								},
								{
									"key": "new_serial_number",
									"value": "test",
									"type": "text"
								},
								{
									"key": "bike_id",
									"value": "8",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/component/swap",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"component",
								"swap"
							]
						}
					},
					"response": []
				},
				{
					"name": "component/recalled/list",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiI3NGNjZjlmYWI0MTliNjdiYmEwNmFjZTZmMzU2Nzk0ZTM2ZTJkNDNlNjA2YjBhNzdhYjcyMDE0MTE4NWYxYWM3Yzc0MTJlOTRlMWNlZWQ1MCIsImlhdCI6MTYzOTQxMDU1MywibmJmIjoxNjM5NDEwNTUzLCJleHAiOjE2NzA5NDY1NTMsInN1YiI6IjMiLCJzY29wZXMiOltdfQ.PAfznb5g28KaQw5bycwIoREC7zSnGI5QehcxKIYRKHq20awEOopprOZQwWc_n6qBoGFElBnYo0HQ6bRrxwdVcIeP4-FyAqBT5XaGiAM7Qf7mChDD-t8yXLmPCvFzgNrV1_G90pFyb_Wep-5aS-X94vm5FBcS4rvUxYs-F0OYNiXbdi18JLvolYApfnQX5YCgme_eD13jqupofN3EVvFMulJ34ouKCAmPfcUP8bdZdjmPJe77EYUJYOnhq1adx2K3VPSY7JBzKxMw-Q2feSVuF5kjitSZWXkxZX5Gx8U2Q5H95RG-S8e7sTThUE5DdQLaWNqyR2kBWTo5EeEV-v-YlKHdYKfz3zk5A71bzaVa5yZW2gpaHg0bdHeKTDRPjxMy0Uihs5tG8AUD9XOmxRorteE510SbiYL4cZ6orWsCV7vyUluYbk27TbKwsXGoOrEEDoF4bXAefHGAZJb_2_zeAVsTaOvyfcSo_AvIkgB4PtI8wgdrrVUT2G_h5Zj1X7hhILwTrXYKoMTOGka1Gyv5ZVXifXrMSAQDeQ2TJBktvSP3YwrvXI9nte2gjSSiSMdbS7GTXrvJwwrbKxaU91DqrTxoN7Hsz-2czxgUXY1OSDic1hbz6A6gF1S824_-Fvw9Yr1_uQOJUeWbN_l-FCERImM8irN5g82VOyi3-tNjcW0",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "16",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/component/recalled/list",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"component",
								"recalled",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "component/recalled/add",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiI3NGNjZjlmYWI0MTliNjdiYmEwNmFjZTZmMzU2Nzk0ZTM2ZTJkNDNlNjA2YjBhNzdhYjcyMDE0MTE4NWYxYWM3Yzc0MTJlOTRlMWNlZWQ1MCIsImlhdCI6MTYzOTQxMDU1MywibmJmIjoxNjM5NDEwNTUzLCJleHAiOjE2NzA5NDY1NTMsInN1YiI6IjMiLCJzY29wZXMiOltdfQ.PAfznb5g28KaQw5bycwIoREC7zSnGI5QehcxKIYRKHq20awEOopprOZQwWc_n6qBoGFElBnYo0HQ6bRrxwdVcIeP4-FyAqBT5XaGiAM7Qf7mChDD-t8yXLmPCvFzgNrV1_G90pFyb_Wep-5aS-X94vm5FBcS4rvUxYs-F0OYNiXbdi18JLvolYApfnQX5YCgme_eD13jqupofN3EVvFMulJ34ouKCAmPfcUP8bdZdjmPJe77EYUJYOnhq1adx2K3VPSY7JBzKxMw-Q2feSVuF5kjitSZWXkxZX5Gx8U2Q5H95RG-S8e7sTThUE5DdQLaWNqyR2kBWTo5EeEV-v-YlKHdYKfz3zk5A71bzaVa5yZW2gpaHg0bdHeKTDRPjxMy0Uihs5tG8AUD9XOmxRorteE510SbiYL4cZ6orWsCV7vyUluYbk27TbKwsXGoOrEEDoF4bXAefHGAZJb_2_zeAVsTaOvyfcSo_AvIkgB4PtI8wgdrrVUT2G_h5Zj1X7hhILwTrXYKoMTOGka1Gyv5ZVXifXrMSAQDeQ2TJBktvSP3YwrvXI9nte2gjSSiSMdbS7GTXrvJwwrbKxaU91DqrTxoN7Hsz-2czxgUXY1OSDic1hbz6A6gF1S824_-Fvw9Yr1_uQOJUeWbN_l-FCERImM8irN5g82VOyi3-tNjcW0",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "16",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/component/recalled/add?component_id=1&serial_number=12345",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"component",
								"recalled",
								"add"
							],
							"query": [
								{
									"key": "component_id",
									"value": "1"
								},
								{
									"key": "serial_number",
									"value": "12345"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "component/recalled/delete",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiI3NGNjZjlmYWI0MTliNjdiYmEwNmFjZTZmMzU2Nzk0ZTM2ZTJkNDNlNjA2YjBhNzdhYjcyMDE0MTE4NWYxYWM3Yzc0MTJlOTRlMWNlZWQ1MCIsImlhdCI6MTYzOTQxMDU1MywibmJmIjoxNjM5NDEwNTUzLCJleHAiOjE2NzA5NDY1NTMsInN1YiI6IjMiLCJzY29wZXMiOltdfQ.PAfznb5g28KaQw5bycwIoREC7zSnGI5QehcxKIYRKHq20awEOopprOZQwWc_n6qBoGFElBnYo0HQ6bRrxwdVcIeP4-FyAqBT5XaGiAM7Qf7mChDD-t8yXLmPCvFzgNrV1_G90pFyb_Wep-5aS-X94vm5FBcS4rvUxYs-F0OYNiXbdi18JLvolYApfnQX5YCgme_eD13jqupofN3EVvFMulJ34ouKCAmPfcUP8bdZdjmPJe77EYUJYOnhq1adx2K3VPSY7JBzKxMw-Q2feSVuF5kjitSZWXkxZX5Gx8U2Q5H95RG-S8e7sTThUE5DdQLaWNqyR2kBWTo5EeEV-v-YlKHdYKfz3zk5A71bzaVa5yZW2gpaHg0bdHeKTDRPjxMy0Uihs5tG8AUD9XOmxRorteE510SbiYL4cZ6orWsCV7vyUluYbk27TbKwsXGoOrEEDoF4bXAefHGAZJb_2_zeAVsTaOvyfcSo_AvIkgB4PtI8wgdrrVUT2G_h5Zj1X7hhILwTrXYKoMTOGka1Gyv5ZVXifXrMSAQDeQ2TJBktvSP3YwrvXI9nte2gjSSiSMdbS7GTXrvJwwrbKxaU91DqrTxoN7Hsz-2czxgUXY1OSDic1hbz6A6gF1S824_-Fvw9Yr1_uQOJUeWbN_l-FCERImM8irN5g82VOyi3-tNjcW0",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "16",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/component/recalled/delete?component_id=1&serial_number=12345",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"component",
								"recalled",
								"delete"
							],
							"query": [
								{
									"key": "component_id",
									"value": "1"
								},
								{
									"key": "serial_number",
									"value": "12345"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "chkupdate",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiI0YTJjNmU1OTliM2NkODk3OTM2YTVkMTFhZGMwMDdlYTBkYjI3NjJlMTFmZDhkYWU2Y2RiMzY2MjY4Zjg0M2I4YjhhNjA2YzVlMzQxNWFhZCIsImlhdCI6MTY1MTE1NTAzMy41MTc4ODIsIm5iZiI6MTY1MTE1NTAzMy41MTc4ODcsImV4cCI6MTY4MjY5MTAzMy41MTEyMDcsInN1YiI6IjMiLCJzY29wZXMiOltdfQ.Ycy6VpCVYga0R8fMKmDlk6qiqrX7fE2_x7Mp6HNFS7s7NFKVHB5CIjPnOWa6-si5GAzeWtGcn5e0ch5i7h_-XLj2-bluPlZipG90NuLXfdgL8RBj7FYamBvdi5GXRnLH6Wc_lLfAOseMEOdtsf7UjKXEPCSQYMD35bElaXbfObtwalXI7wQyni9Le-wYVsBqztNfxDVsPaI-359MXq1oc_osWzOA4IJDdwUb9CXNa45GTH2o3jv3pYtDrEzTUSjqItBAFqMo-QYF2_kn979D9JorCcnti-F9zYwH2iXkrnivpTsBvouIaKCBIhhscxCHKyN3mOhR_nUQF6dbbDTMrNL3WQ7WdiMJgt5_KhhZjtGNfgXcuAwGgJsmDMyHMRSjA7AUgiIH1Yu2QTncDO4AsQa7FjaS5pQuh8ohzQ3mxWYKL1yI27bAHl6_A0oscimfA8Gf8Z_CUqvUNDM4DVWrG8yj7T-43PYXYInqVmGQizv1Lv8DgWoDUZBm1b5lEaFzszqMfU65sETfbXUoFbp5-fULwSoVNAD8srmCo0Ev0VtByaqKJ3gZgOO0CLlN1rSNX4mdCuCJrazCJPF0n7yFmQVskulMBeWDRr7so5fzFoiEhGUbdiKl3fjx4Pf6DOX3CE5mRsdVGNRXgxyJe5UP4bwyrsRtJn4-Y7ByNeH9YuM",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "components[2][bike_serial]",
									"value": "testserial-3"
								},
								{
									"key": "components[2][component_id]",
									"value": "14"
								},
								{
									"key": "components[2][serial_number]",
									"value": "54321"
								},
								{
									"key": "components[2][component_version]",
									"value": "1.3.0"
								},
								{
									"key": "components[5][bike_serial]",
									"value": "testserial-3"
								},
								{
									"key": "components[5][component_id]",
									"value": "1"
								},
								{
									"key": "components[5][serial_number]",
									"value": "12345"
								},
								{
									"key": "components[5][component_version]",
									"value": "1.0.0"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/chkupdate",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"chkupdate"
							],
							"query": [
								{
									"key": "components[5][bike_id]",
									"value": "10",
									"disabled": true
								},
								{
									"key": "components[5][component_id]",
									"value": "1",
									"disabled": true
								},
								{
									"key": "components[5][serial_number]",
									"value": "12345",
									"disabled": true
								},
								{
									"key": "components[5][component_version]",
									"value": "1000000",
									"disabled": true
								},
								{
									"key": "components[2][bike_id]",
									"value": "10",
									"disabled": true
								},
								{
									"key": "components[2][component_id]",
									"value": "4",
									"disabled": true
								},
								{
									"key": "components[2][serial_number]",
									"value": "54321",
									"disabled": true
								},
								{
									"key": "components[2][component_version]",
									"value": "1003000",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiI3NGNjZjlmYWI0MTliNjdiYmEwNmFjZTZmMzU2Nzk0ZTM2ZTJkNDNlNjA2YjBhNzdhYjcyMDE0MTE4NWYxYWM3Yzc0MTJlOTRlMWNlZWQ1MCIsImlhdCI6MTYzOTQxMDU1MywibmJmIjoxNjM5NDEwNTUzLCJleHAiOjE2NzA5NDY1NTMsInN1YiI6IjMiLCJzY29wZXMiOltdfQ.PAfznb5g28KaQw5bycwIoREC7zSnGI5QehcxKIYRKHq20awEOopprOZQwWc_n6qBoGFElBnYo0HQ6bRrxwdVcIeP4-FyAqBT5XaGiAM7Qf7mChDD-t8yXLmPCvFzgNrV1_G90pFyb_Wep-5aS-X94vm5FBcS4rvUxYs-F0OYNiXbdi18JLvolYApfnQX5YCgme_eD13jqupofN3EVvFMulJ34ouKCAmPfcUP8bdZdjmPJe77EYUJYOnhq1adx2K3VPSY7JBzKxMw-Q2feSVuF5kjitSZWXkxZX5Gx8U2Q5H95RG-S8e7sTThUE5DdQLaWNqyR2kBWTo5EeEV-v-YlKHdYKfz3zk5A71bzaVa5yZW2gpaHg0bdHeKTDRPjxMy0Uihs5tG8AUD9XOmxRorteE510SbiYL4cZ6orWsCV7vyUluYbk27TbKwsXGoOrEEDoF4bXAefHGAZJb_2_zeAVsTaOvyfcSo_AvIkgB4PtI8wgdrrVUT2G_h5Zj1X7hhILwTrXYKoMTOGka1Gyv5ZVXifXrMSAQDeQ2TJBktvSP3YwrvXI9nte2gjSSiSMdbS7GTXrvJwwrbKxaU91DqrTxoN7Hsz-2czxgUXY1OSDic1hbz6A6gF1S824_-Fvw9Yr1_uQOJUeWbN_l-FCERImM8irN5g82VOyi3-tNjcW0",
								"description": "dealer token",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IjJCSE90TTB2R0h0NjR0enB6cGpNVDVXNkVwYS1ULXY4QXZGQU1UeS1pZjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ5MTQ0Njk5LCJuYmYiOjE2NDkxNDQ2OTksImV4cCI6MTY0OTE1MDAwMywiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQUIxNG5SUkF0WnFQSGhqaHZqYVZHOEU5MWpPVGdVM3hSS3pqUW5QcEpDT2VpMXdIamVDUEk0cXdtQTZoQkJicTBWazdQV0tYVFZEa3lNVFJCZnN5ajdRPT0iLCJhbHRzZWNpZCI6IjE6bGl2ZS5jb206MDAwMzQwMDEyRDQ3NTdEQSIsImFtciI6WyJwd2QiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImVtYWlsIjoibWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwiZmFtaWx5X25hbWUiOiJNw6F0w6kiLCJnaXZlbl9uYW1lIjoiVGFrw6FjcyIsImlkcCI6ImxpdmUuY29tIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMjEzLjIyMi4xOTEuMjMzIiwibmFtZSI6IlRha8OhY3MgTcOhdMOpIiwib2lkIjoiMDdkNWVmODktODY2MS00NWM5LWE5M2UtZjdkN2I0ZTc4YTE1IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxRTUxQTM3MTgiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUdrLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic3ViIjoiRXdTUEdxbHR3VGUtc1hsMERzeU5NM0hWQ1ktSVFnMEpqYU1BVnA3Z2NRQSIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJFVSIsInRpZCI6ImQ1MTk5OTA3LTY1ODAtNDY0OC1iYjMxLWRiYTE5YTI3OTU4MyIsInVuaXF1ZV9uYW1lIjoibGl2ZS5jb20jbWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwidXRpIjoiaEk0R29qWDJQa0dIOV9iSUYySTlBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiMTNiZDFjNzItNmY0YS00ZGNmLTk4NWYtMThkM2I4MGYyMDhhIl0sInhtc19zdCI6eyJzdWIiOiJiWGFJSG5BX2pnWG5nVTlwRkpDZTJ2WlB1bW5TcHktWTZoaUhkajZXSGNVIn0sInhtc190Y2R0IjoxNTI4NzI5NzQzfQ.M1hAhr4c6-Ml7yazLd0wGXvKtPXhKnHGpbI6HNRzHexyrasMepz2utT-uZb5vJwcCr0mNMgAUJsAbm8kgRDWQF4RSIKTIEGNRruQYLh-SjDKbNt6MQ0k7ZCl63Y5hKkGyMZpuGoj3Nvg4e_28XbzP4g4hpycos1aqhptEAslLZvAcY3ARIlr_WtqbEidhTkuBvzYlnOoVzao-BOe8L3RDCttHAESoxhFv_AQfI_NV4PtutCSyuIp1ywtEPpLnjsXwR2O6zDEAPOv2JDUaUICmtQldVkWn6syp4PAUgS1ENbltTMo9VzEPpx2xrXc3PwFi8CaalruxSINrW_8Rr9_rg",
								"description": "Taki",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IlctZ2xBYWFSQTlDMW5PLThkWnpzR1dyeXpXVXFqcUlkeVd2Mjh1d1ZpTjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjUwNDU3NDI5LCJuYmYiOjE2NTA0NTc0MjksImV4cCI6MTY1MDQ2MzA4NiwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFaUUFhLzhUQUFBQWlVVmgvRlE4WjA3SGFsaFA3Y1VnMUdpZUpwVitZTGRhcmY2OS84bWFKd0dYQXpGblhaQ1B2eTVmUWdjMWpvU0E0SkdLN1FoRkNORTdoemNWWFUwdTE0OUpjNFp2N1NXbkNrTDZRaXRnanE4YlFPeXJpcDc1NE1rbGdKb011Q1FDaGh3NmpIWlBtaElueFNyMmpaV1ZTKzN0L2lRREpkM0JCMVk0dE5NUTJFRkUzeDMwMHBQMDhweThQNm56MmY0cyIsImFtciI6WyJwd2QiLCJtZmEiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImZhbWlseV9uYW1lIjoiS2ltcGZsZXIiLCJnaXZlbl9uYW1lIjoiTWFyY28iLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIyMTcuMjQ4LjM3Ljg5IiwibmFtZSI6Ik1hcmNvIEtpbXBmbGVyIiwib2lkIjoiMjUxZTI0ZTItMWE2Yi00NDJjLWIzY2UtZDM2YWU5N2U0OWY2IiwicGxhdGYiOiI1IiwicHVpZCI6IjEwMDM3RkZFQUVGNUYyOEYiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUVFLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIFVzZXIuUmVhZCBlbWFpbCIsInNpZ25pbl9zdGF0ZSI6WyJrbXNpIl0sInN1YiI6IjlIOWx0TXQxN1RTc241LUJWdHB0LW9VbmtKeHhuYTNSYUE0UzFrQ1ptQjQiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiRVUiLCJ0aWQiOiJkNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMiLCJ1bmlxdWVfbmFtZSI6Im0ua2ltcGZsZXJAemZtaWNyb21vYmlsaXR5LmNvbSIsInVwbiI6Im0ua2ltcGZsZXJAemZtaWNyb21vYmlsaXR5LmNvbSIsInV0aSI6InNGRUVYR1ZNU1VHWGpQMzYxVFFOQUEiLCJ2ZXIiOiIxLjAiLCJ3aWRzIjpbIjYyZTkwMzk0LTY5ZjUtNDIzNy05MTkwLTAxMjE3NzE0NWUxMCIsImI3OWZiZjRkLTNlZjktNDY4OS04MTQzLTc2YjE5NGU4NTUwOSJdLCJ4bXNfc3QiOnsic3ViIjoiMjR3ZGhMUHhmcEZjMklFcklNZURDUEFiUm84TWQ2RjAwdGpMNWlnTjdORSJ9LCJ4bXNfdGNkdCI6MTUyODcyOTc0M30.f68kmbMrLIalrih2bTSqolpp7YLNJ7Oe2anfmHkjQdZrKMBRNe2yAbvKhqS_3BI3l3FZMXSxUN5Q3BAqxyoCZX4MVeqziAG-IXtG76Akq1svBVegocJZvQgkGFr6hAJ3avmzWma3gjFkbCk7OX2S8K9P31TcN92UyuViYdYLU2Gmwnxmy6zfHT_-5JiUz-Kcoqse8yqqvuyhVu7lqzBjTl45QpVIGU2FUCYH3NisU-JBB6pb-KSLcGHh39OazcV6zILYjZxtamcgxj6dvA3PnxSbMYI_aeQJzkCOzI57uns-otgjjZHrSXkZ9fXLWpGhfmwXdNSNX4OKEtY7KjmX_g",
								"description": "Marco",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6ImhXZ2tBU3pUR09JXzNjOWtpQXV2Um4xTm5MRERfRW02Rlhvdjk5WUR5cGMiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ5ODUzMzg5LCJuYmYiOjE2NDk4NTMzODksImV4cCI6MTY0OTg1ODI3MCwiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQXFCc3ArU1pKb2J4RGlKcmt0OExha1dRdTlKcTk2TkZLanlscWZ0TEpoZWxLZ2M0cW9qWDZYbk1pSDVPU1dJWVpYMHJrbm9ZWStVZFd0THNxcmd6Qnh3PT0iLCJhbHRzZWNpZCI6IjU6OjEwMDMyMDAxRUE1MkI1MDIiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkdQU1R1bmVyIENvbmZpZyBUb29sIiwiYXBwaWQiOiIzZWJkYzM2Ny1iMjlhLTRjYjgtYjc2Zi0xYWYzNzVmOTlhM2IiLCJhcHBpZGFjciI6IjAiLCJlbWFpbCI6ImdhYm9yLmVybWVueWlAZ3BzdHVuZXIuY29tIiwiaWRwIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvMTgyNWQxMjQtZjhhYS00MjliLTgxZGYtZGQ5Njg3YjUwN2U1LyIsImlkdHlwIjoidXNlciIsImlwYWRkciI6IjIxMy4yMjIuMTkxLjIzMyIsIm5hbWUiOiJnYWJvci5lcm1lbnlpIiwib2lkIjoiNmExOWM4MTYtOGM2Ny00ZDdkLTgzZDctZmZkYTMyZTM4Njc0IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxRUE0RDY5MUEiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QVBzLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIFVzZXIuUmVhZCBlbWFpbCIsInN1YiI6IkNaVlBYT1ZTVnVVVnF5R2FraE1iNlVUMVA5aVQ2aG9Kc2c0OVVUREJWdVkiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiRVUiLCJ0aWQiOiJkNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMiLCJ1bmlxdWVfbmFtZSI6ImdhYm9yLmVybWVueWlAZ3BzdHVuZXIuY29tIiwidXRpIjoiNGhOTFd6aGZfMGV1dkcwYllyZFpBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiMTNiZDFjNzItNmY0YS00ZGNmLTk4NWYtMThkM2I4MGYyMDhhIl0sInhtc19zdCI6eyJzdWIiOiJGNXUxeVFiWnI2OF9YQmp4N19DbEN6dU5IbUczRTg2cndTQnduVF8wTldzIn0sInhtc190Y2R0IjoxNTI4NzI5NzQzfQ.R2_qPPjT_yOj7TqbdECN6aYTz6yIhNC9Vluxo5VPQ0UfV-EUYjizQkvqzjcYywaXIrYkJPyj17v2OtFrkE3GaHnj8-tfNtumc5k8Qa0HiJt8oPpF5usNwKLUMXm2hHtOT6xyQcyYyYpWB-dGmKsY3rQnDQmEYRrixdieT1UOAt4rAT4XIhI-gvlY3h-OdQm96Zr0wNEgz53cgI2RLHzzv7UnBVcoMKZN1gzsjfXg0ovfhQcmBcHHlHvgaoPOWEYyl89H6TJN1vVnk0hEZNT43E3aM4IH2xpzHX_GM1twpnIpBY_uC9lZkz7iCZ4X2StuWlaKjY_oSMgSr3bqTwUJGw",
								"description": "Gabi",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6ImRTam5FWWVEM2tqazhLZkVnZjhHVnNwLWRhWGhXM09HQzYzdGVtUE5MNWciLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ4NjI5NzM0LCJuYmYiOjE2NDg2Mjk3MzQsImV4cCI6MTY0ODYzNTE1MywiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQVRBb21OWW9Ubm5nSmtFdlVtZ1lMZ0VQRkhyL2FCNkdMcGJIa3k2bDJ0NjNneml0KytsTXZOUnpHUk1WdGhYUE1QME5UVXlvM1psNzQxR1ZvakRieDZRPT0iLCJhbHRzZWNpZCI6IjU6OjEwMDMyMDAxRTI1MzAzRDUiLCJhbXIiOlsicHdkIl0sImFwcF9kaXNwbGF5bmFtZSI6IkdQU1R1bmVyIENvbmZpZyBUb29sIiwiYXBwaWQiOiIzZWJkYzM2Ny1iMjlhLTRjYjgtYjc2Zi0xYWYzNzVmOTlhM2IiLCJhcHBpZGFjciI6IjAiLCJlbWFpbCI6ImJvdG9uZC5iaWxpYm9rQGdwc3R1bmVyLmNvbSIsImlkcCI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzE4MjVkMTI0LWY4YWEtNDI5Yi04MWRmLWRkOTY4N2I1MDdlNS8iLCJpZHR5cCI6InVzZXIiLCJpcGFkZHIiOiIyMTMuMjIyLjE5MS4yMzMiLCJuYW1lIjoiYm90b25kLmJpbGlib2siLCJvaWQiOiIyYTA3YTNjOC1kNWQ2LTRkMDMtYTgzMC0zOWEyNTgxNzMzM2QiLCJwbGF0ZiI6IjMiLCJwdWlkIjoiMTAwMzIwMDFFMjUyRUU1MCIsInJoIjoiMC5BVEFBQjVrWjFZQmxTRWE3TWR1aG1pZVZnd01BQUFBQUFBQUF3QUFBQUFBQUFBQXdBR2suIiwic2NwIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJzaWduaW5fc3RhdGUiOlsia21zaSJdLCJzdWIiOiJabmFEaU9GajMtRndkUTdobUNoMzVrWlVTejBwQUJFWUgyN2VKa0k1X3FFIiwidGVuYW50X3JlZ2lvbl9zY29wZSI6IkVVIiwidGlkIjoiZDUxOTk5MDctNjU4MC00NjQ4LWJiMzEtZGJhMTlhMjc5NTgzIiwidW5pcXVlX25hbWUiOiJib3RvbmQuYmlsaWJva0BncHN0dW5lci5jb20iLCJ1dGkiOiJEVjFjVHBkeGlFMngwOE85N2FRSkFBIiwidmVyIjoiMS4wIiwid2lkcyI6WyIxM2JkMWM3Mi02ZjRhLTRkY2YtOTg1Zi0xOGQzYjgwZjIwOGEiXSwieG1zX3N0Ijp7InN1YiI6IjlTemdrZjN6U2hrak02WTBvQXpQZC0tUzhfRnFFYnlMakZkekVwcUZzaDAifSwieG1zX3RjZHQiOjE1Mjg3Mjk3NDN9.VSjC_cktrkVkVbahc61B7oT6Gfi4qcafzWK6nhEt9otAziZmWSTS1kbTj68lxkyn0cXi5JElvgb3rUyGVTq7ifz1VazHyQsNncdldZnkUc4nZRZbWPn339K7Ev7UYMNqVcNF0OCXqcw28-G6fiwSaQPLoxG0RTdFPgQcY9WZdfjEgakwEsPULx5Fg_7yY7ddRQfHoflx0627q49xZiyMlO27JJanRRtEeziQCU8kaIcdiMwKSdDXcO7nI6E73vaSXZvtFOqU9zy7ViJgia1N24QkCADbpwUOfP3Uop8Pf5PwvY1mmaAScMjDhZGreng4wYr6m-uv2h2ouMTP26pHGw",
								"description": "Boti",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "16",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/update?components[5][bike_serial]=testserial-3&components[5][component_id]=1&components[5][serial_number]=12345&components[5][component_version]=1.3.0&components[2][bike_serial]=testserial-3&components[2][component_id]=14&components[2][serial_number]=54321&components[2][component_version]=1.0.0",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"update"
							],
							"query": [
								{
									"key": "components[0][bike_id]",
									"value": "1",
									"disabled": true
								},
								{
									"key": "components[1][bike_id]",
									"value": "2",
									"disabled": true
								},
								{
									"key": "components[5][bike_serial]",
									"value": "testserial-3"
								},
								{
									"key": "components[5][component_id]",
									"value": "1"
								},
								{
									"key": "components[5][serial_number]",
									"value": "12345"
								},
								{
									"key": "components[5][component_version]",
									"value": "1.3.0"
								},
								{
									"key": "components[1][bike_id]",
									"value": "10",
									"disabled": true
								},
								{
									"key": "components[1][component_id]",
									"value": "79",
									"disabled": true
								},
								{
									"key": "components[1][serial_number]",
									"value": "12345",
									"disabled": true
								},
								{
									"key": "components[1][component_version]",
									"value": "1",
									"disabled": true
								},
								{
									"key": "components[2][bike_serial]",
									"value": "testserial-3"
								},
								{
									"key": "components[2][component_id]",
									"value": "14"
								},
								{
									"key": "components[2][serial_number]",
									"value": "54321"
								},
								{
									"key": "components[2][component_version]",
									"value": "1.0.0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "updatehistory",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiI3NGNjZjlmYWI0MTliNjdiYmEwNmFjZTZmMzU2Nzk0ZTM2ZTJkNDNlNjA2YjBhNzdhYjcyMDE0MTE4NWYxYWM3Yzc0MTJlOTRlMWNlZWQ1MCIsImlhdCI6MTYzOTQxMDU1MywibmJmIjoxNjM5NDEwNTUzLCJleHAiOjE2NzA5NDY1NTMsInN1YiI6IjMiLCJzY29wZXMiOltdfQ.PAfznb5g28KaQw5bycwIoREC7zSnGI5QehcxKIYRKHq20awEOopprOZQwWc_n6qBoGFElBnYo0HQ6bRrxwdVcIeP4-FyAqBT5XaGiAM7Qf7mChDD-t8yXLmPCvFzgNrV1_G90pFyb_Wep-5aS-X94vm5FBcS4rvUxYs-F0OYNiXbdi18JLvolYApfnQX5YCgme_eD13jqupofN3EVvFMulJ34ouKCAmPfcUP8bdZdjmPJe77EYUJYOnhq1adx2K3VPSY7JBzKxMw-Q2feSVuF5kjitSZWXkxZX5Gx8U2Q5H95RG-S8e7sTThUE5DdQLaWNqyR2kBWTo5EeEV-v-YlKHdYKfz3zk5A71bzaVa5yZW2gpaHg0bdHeKTDRPjxMy0Uihs5tG8AUD9XOmxRorteE510SbiYL4cZ6orWsCV7vyUluYbk27TbKwsXGoOrEEDoF4bXAefHGAZJb_2_zeAVsTaOvyfcSo_AvIkgB4PtI8wgdrrVUT2G_h5Zj1X7hhILwTrXYKoMTOGka1Gyv5ZVXifXrMSAQDeQ2TJBktvSP3YwrvXI9nte2gjSSiSMdbS7GTXrvJwwrbKxaU91DqrTxoN7Hsz-2czxgUXY1OSDic1hbz6A6gF1S824_-Fvw9Yr1_uQOJUeWbN_l-FCERImM8irN5g82VOyi3-tNjcW0",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bike_serial",
									"value": "testserial-3"
								},
								{
									"key": "release_id",
									"value": "180",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/updatehistory",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"updatehistory"
							],
							"query": [
								{
									"key": "components[5][bike_id]",
									"value": "10",
									"disabled": true
								},
								{
									"key": "components[5][component_id]",
									"value": "1",
									"disabled": true
								},
								{
									"key": "components[5][serial_number]",
									"value": "12345",
									"disabled": true
								},
								{
									"key": "components[5][component_version]",
									"value": "1000000",
									"disabled": true
								},
								{
									"key": "components[2][bike_id]",
									"value": "10",
									"disabled": true
								},
								{
									"key": "components[2][component_id]",
									"value": "4",
									"disabled": true
								},
								{
									"key": "components[2][serial_number]",
									"value": "54321",
									"disabled": true
								},
								{
									"key": "components[2][component_version]",
									"value": "1003000",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "updateConnectionKey",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiI0YmY5MWVmOGE0ZWZlNmE3OWFmMjg5YTc1YzY5NmNmMTYxZGE1OTg2ZTg0Mzk4OTBhZWY5MjYxNDE5N2NkYzk4MjFkNmVkMzNkNmEzODc1MyIsImlhdCI6MTY4Nzg1NzMyNi4wNDY4MTEsIm5iZiI6MTY4Nzg1NzMyNi4wNDY4MTYsImV4cCI6MTcxOTQ3OTcyNi4wMjg3NzUsInN1YiI6IjEyIiwic2NvcGVzIjpbXX0.ecEqCj-0ET6kFyHzOfg8Xz9Hpgwdybb_0IMIOr1gw1XVRk5JKeki9XpmP0bBcX2dW0WZG2-gbYsF1wx-xg9V3U7A-x7K-gX-MHizAQCBh8lB3d9xH2HF4uZhAjQmrhP1LCr4XsGywwrVlJPZsdcKA_xUPtcvFTijV2JCYNlsLlkN29U_jfDET00y93DEqfUl8C_OmNjDYyZwj5ewsctWDynFo2cQVGxAPQ8YO2OrEYSXB3M3pEi109yuB9s0zrCb6u4JlJJH0SPqMiapYxRT7wLQ88WgPq3j--7Q3eudM8yFFN0tZCnq1xVUFLqGyYqTNuqTw5UURvldtVxdc5oOIcxjUHzdCC4XzDflDUOr15cbm0rwjpntnr7wBpOTBh7-dBINt1n1Dja6P-YX5U3HV39I-OefLbN4hUFMLELrYw2-BRdxUXZt4AlTxFn0Yk47eTXBOivxze4X5owvTbKKUuQWssWudu-RHP370otfNc84qaha-Uf14QvEop7bMtJEz-LbzPPoPUZvVhMc6apKzFMlnl2JA4cnBx5Pxfokw5PmvUl9pva23WDt2Tpv1uYvv3uZgtxPGMZ3bewekgB2QWv1KUOD5xbYTsFyVBpYDhDaK2S9DZxC29J1iT9N0GzLc2LK0pTSUEVSaem3abjIvBPE0h2vEPwy-aAZ-oEj06Q",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bike_serial",
									"value": "6AA2E4BE"
								},
								{
									"key": "connection_key",
									"value": "test2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/updateConnectionKey?bike_id=testserial-1-update",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"updateConnectionKey"
							],
							"query": [
								{
									"key": "bike_id",
									"value": "testserial-1-update"
								},
								{
									"key": "connection_key",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getConnectionKey",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_dealer}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api_server}}api/dealer/getConnectionKey?bike_serial=testserial-1-update",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"getConnectionKey"
							],
							"query": [
								{
									"key": "bike_serial",
									"value": "testserial-1-update"
								},
								{
									"key": "connection_key",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "dealer upload",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_dealer}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "rollout_data[0][bike_id]",
									"value": "TESTBIKEID6",
									"type": "text"
								},
								{
									"key": "rollout_data[0][component_id]",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "rollout_data[0][type]",
									"value": "Rollout",
									"type": "text"
								},
								{
									"key": "rollout_data[0][deliveries]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "rollout_data[0][success]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "rollout_data[0][errors]",
									"value": "0",
									"type": "text"
								},
								{
									"key": "rollout_data[0][serial_number]",
									"value": "testserial27",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/dealer/rollout/dealer_upload",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"dealer",
								"rollout",
								"dealer_upload"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "endUser tool",
			"item": [
				{
					"name": "api/login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{api_server}}api/login?client_id=niz0TVC8A1zbXtfDi0lP2pxZZtdtpT9gqwrkDMpSE&client_secret=bbzzIkyq20Ez6FuLKurw17e1XMYQMxXt2Qk0Lof97",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"login"
							],
							"query": [
								{
									"key": "client_id",
									"value": "niz0TVC8A1zbXtfDi0lP2pxZZtdtpT9gqwrkDMpSE"
								},
								{
									"key": "client_secret",
									"value": "bbzzIkyq20Ez6FuLKurw17e1XMYQMxXt2Qk0Lof97"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "component/stolen/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"});\r",
									"pm.test(\"Data is an array\", function(){\r",
									"    pm.expect(pm.response.json().data).to.be.an('array');\r",
									"});\r",
									"pm.test(\"Component Id and Component name is not null\", function () {\r",
									"    var responseJsonData = pm.response.json().data;\r",
									"    responseJsonData.forEach((items) => {\r",
									"        pm.expect(items.component_id).not.to.be.null;\r",
									"        pm.expect(items.component_name).not.to.be.null;\r",
									"    });\r",
									"});\r",
									"pm.test(\"Component stolen is an array\", function () {\r",
									"    var responseJsonData = pm.response.json().data;\r",
									"    responseJsonData.forEach((items) => {\r",
									"        pm.expect(items.component_stolen).to.be.an('array');\r",
									"    });\r",
									"});\r",
									"pm.test(\"Component id is incrementing\", function () {\r",
									"     var responseJson = pm.response.json();     \r",
									"     if(responseJson.data.length > 1) {\r",
									"            responseJson.data.forEach((component, index) => {\r",
									"                if(index > 0) {\r",
									"                     pm.expect(component.component_id).to.be.greaterThan(responseJson.data[index - 1].component_id);\r",
									"                }\r",
									"            });\r",
									"     } else if (responseJson.data.length == 1) {\r",
									"            pm.expect(responseJson.data).to.be.an('array', \"Data have 1 component\");\r",
									"     } else {\r",
									"        pm.expect(responseJson.data).to.be.an('array', \"Data is an empty array\");\r",
									"     }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_enduser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id",
									"value": "16",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/enduser/component/stolen/list",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"enduser",
								"component",
								"stolen",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "component/stolen/add",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NDA0YzU4YS05ODQ0LTQwZjItOWQ1NC0yYWM5NzVlZTQxMjEiLCJqdGkiOiIwOWYyOWE3OWY3OGIzNjRiZWJlZGU0NzAyNmVhMTI3ZDJiYmJiZDJmNjdjMDQwY2UwMmM0NDE3MzIyZjMwOTMyOGMyN2U0MGU5NTE0MDc2NyIsImlhdCI6MTY1MTU2NzI2MC40NjMxNzYsIm5iZiI6MTY1MTU2NzI2MC40NjMxODIsImV4cCI6MTY4MzEwMzI2MC40NTI0NjMsInN1YiI6IjMiLCJzY29wZXMiOltdfQ.j9WCAnyAHkH26v_YN_GCLXj1LVk_9s0zyX1FXx16YyuCHKnc8RN8a6WcyWpgmqWeqZUk1gPsKJ5UlTAu3HAVmWBTtQAmgOeBC2poyGxCuxDkCTAwks4abDd1IfkKBKlgLd1uRdSRn2AdivpMm8eLAU6FRiByVSH6RSTwD2NsaEvph9CGMuOcQduNR8bRkIAcuvrDO_z0zOV0kNZKmAAdVY03RMUdPvWA4OQDu1-qb9cnRbF8T1pw_KNpK0Ji74DGOvFjJuIVlo3g_K-LvXKqxPrboyg8uxcCaD8ErcLw3rmJw5VWtXHXdsb4Iu3_TlO0HrvnMXLmAFiXbtQ_tS587jTpnfRYkUlavTJWAyn65zzO3oWmBcYI-STN3tPEUK-uWajAI6FGPB-QyWuguXfKT62JY4WSigRg82aNDMYFdT_0GlmJ-y9ybKm_o3oR6NSTCD8AMeD-hWa2-10K4aoEw3TECzFel2RkVM22wMeiuMRmWsedK9be0cEnkzYy28Zfe10TxOpDwPexwmj-GtUja_WSTjVEgUydXOyHyWjojo4o3VqdV3MKuq4817HdwsvNkgc_9mA5p6EGe8NmU0njA6TM8_yW4rLKykjX_IsTgdeX87oAMCm2AeLE90uq3jv5oUjHQHfKbR3eMRb9H92lJkn6df3LtR3fwzK-1YLmquo",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bike_serial",
									"value": "test5",
									"type": "text",
									"disabled": true
								},
								{
									"key": "component_serial",
									"value": "test5 - 85720",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/enduser/component/stolen/add",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"enduser",
								"component",
								"stolen",
								"add"
							],
							"query": [
								{
									"key": "component_id",
									"value": "1",
									"disabled": true
								},
								{
									"key": "serial_number",
									"value": "12345",
									"disabled": true
								},
								{
									"key": "bike_serial",
									"value": "test5",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "component/stolen/delete",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_enduser}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bike_serial",
									"value": "2",
									"type": "text"
								},
								{
									"key": "component_serial",
									"value": "test5 - 85720",
									"type": "text"
								},
								{
									"key": "component_id",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "serial_number",
									"value": "12345",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/enduser/component/stolen/delete",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"enduser",
								"component",
								"stolen",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "component/bikes/list",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authorization_enduser}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJub25jZSI6IjJCSE90TTB2R0h0NjR0enB6cGpNVDVXNkVwYS1ULXY4QXZGQU1UeS1pZjgiLCJhbGciOiJSUzI1NiIsIng1dCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyIsImtpZCI6ImpTMVhvMU9XRGpfNTJ2YndHTmd2UU8yVnpNYyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC9kNTE5OTkwNy02NTgwLTQ2NDgtYmIzMS1kYmExOWEyNzk1ODMvIiwiaWF0IjoxNjQ5MTQ0Njk5LCJuYmYiOjE2NDkxNDQ2OTksImV4cCI6MTY0OTE1MDAwMywiYWNjdCI6MSwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhUQUFBQUIxNG5SUkF0WnFQSGhqaHZqYVZHOEU5MWpPVGdVM3hSS3pqUW5QcEpDT2VpMXdIamVDUEk0cXdtQTZoQkJicTBWazdQV0tYVFZEa3lNVFJCZnN5ajdRPT0iLCJhbHRzZWNpZCI6IjE6bGl2ZS5jb206MDAwMzQwMDEyRDQ3NTdEQSIsImFtciI6WyJwd2QiXSwiYXBwX2Rpc3BsYXluYW1lIjoiR1BTVHVuZXIgQ29uZmlnIFRvb2wiLCJhcHBpZCI6IjNlYmRjMzY3LWIyOWEtNGNiOC1iNzZmLTFhZjM3NWY5OWEzYiIsImFwcGlkYWNyIjoiMCIsImVtYWlsIjoibWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwiZmFtaWx5X25hbWUiOiJNw6F0w6kiLCJnaXZlbl9uYW1lIjoiVGFrw6FjcyIsImlkcCI6ImxpdmUuY29tIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMjEzLjIyMi4xOTEuMjMzIiwibmFtZSI6IlRha8OhY3MgTcOhdMOpIiwib2lkIjoiMDdkNWVmODktODY2MS00NWM5LWE5M2UtZjdkN2I0ZTc4YTE1IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDMyMDAxRTUxQTM3MTgiLCJyaCI6IjAuQVRBQUI1a1oxWUJsU0VhN01kdWhtaWVWZ3dNQUFBQUFBQUFBd0FBQUFBQUFBQUF3QUdrLiIsInNjcCI6Im9wZW5pZCBwcm9maWxlIGVtYWlsIiwic3ViIjoiRXdTUEdxbHR3VGUtc1hsMERzeU5NM0hWQ1ktSVFnMEpqYU1BVnA3Z2NRQSIsInRlbmFudF9yZWdpb25fc2NvcGUiOiJFVSIsInRpZCI6ImQ1MTk5OTA3LTY1ODAtNDY0OC1iYjMxLWRiYTE5YTI3OTU4MyIsInVuaXF1ZV9uYW1lIjoibGl2ZS5jb20jbWF0ZS50YWthY3NAZ3BzdHVuZXIuY29tIiwidXRpIjoiaEk0R29qWDJQa0dIOV9iSUYySTlBQSIsInZlciI6IjEuMCIsIndpZHMiOlsiMTNiZDFjNzItNmY0YS00ZGNmLTk4NWYtMThkM2I4MGYyMDhhIl0sInhtc19zdCI6eyJzdWIiOiJiWGFJSG5BX2pnWG5nVTlwRkpDZTJ2WlB1bW5TcHktWTZoaUhkajZXSGNVIn0sInhtc190Y2R0IjoxNTI4NzI5NzQzfQ.M1hAhr4c6-Ml7yazLd0wGXvKtPXhKnHGpbI6HNRzHexyrasMepz2utT-uZb5vJwcCr0mNMgAUJsAbm8kgRDWQF4RSIKTIEGNRruQYLh-SjDKbNt6MQ0k7ZCl63Y5hKkGyMZpuGoj3Nvg4e_28XbzP4g4hpycos1aqhptEAslLZvAcY3ARIlr_WtqbEidhTkuBvzYlnOoVzao-BOe8L3RDCttHAESoxhFv_AQfI_NV4PtutCSyuIp1ywtEPpLnjsXwR2O6zDEAPOv2JDUaUICmtQldVkWn6syp4PAUgS1ENbltTMo9VzEPpx2xrXc3PwFi8CaalruxSINrW_8Rr9_rg",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "bike_id[0]",
									"value": "test5",
									"type": "text",
									"disabled": true
								},
								{
									"key": "bike_id[1]",
									"value": "tabi_testbike_1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "component_id",
									"value": "1",
									"type": "text",
									"disabled": true
								},
								{
									"key": "serial_number",
									"value": "12345",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{api_server}}api/enduser/bikes/list",
							"host": [
								"{{api_server}}api"
							],
							"path": [
								"enduser",
								"bikes",
								"list"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"value": ""
		},
		{
			"key": "api_server",
			"value": "",
			"type": "string"
		},
		{
			"key": "authorization",
			"value": "",
			"type": "string"
		},
		{
			"key": "authorization_dealer",
			"value": "",
			"type": "string"
		},
		{
			"key": "connection_key",
			"value": ""
		},
		{
			"key": "authorization_enduser",
			"value": "",
			"type": "string"
		},
		{
			"key": "skipRequest",
			"value": "",
			"type": "string"
		},
		{
			"key": "authorization_production",
			"value": "",
			"type": "string"
		}
	]
}